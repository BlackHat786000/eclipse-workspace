!SESSION 2022-12-24 21:00:36.077 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -data C:\Users\yadav\eclipse-workspace -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\Users\yadav\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2022-12-24 21:01:20.694

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.695
!MESSAGE Boot LS startup time from start to initialized: 1774ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.771
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.wXSGAiGIisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.772
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.772
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.773
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.773
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.774
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.wXSGAiGI => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.775
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.777
!MESSAGE buffering callback sts4.classpath.wXSGAiGI AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.778
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.779
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.780
!MESSAGE buffering callback sts4.classpath.wXSGAiGI AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.781
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.782
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.782
!MESSAGE buffering callback sts4.classpath.wXSGAiGI Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.783
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.784
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.785
!MESSAGE buffering callback sts4.classpath.wXSGAiGI Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.786
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.788
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.789
!MESSAGE buffering callback sts4.classpath.wXSGAiGI Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.790
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.791
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.793
!MESSAGE buffering callback sts4.classpath.wXSGAiGI Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.793
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.796
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.798
!MESSAGE buffering callback sts4.classpath.wXSGAiGI Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.799
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.800
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.802
!MESSAGE buffering callback sts4.classpath.wXSGAiGI playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:20.802
!MESSAGE executing callback sts4.classpath.wXSGAiGI 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:01:21.152
!MESSAGE executing callback sts4.classpath.wXSGAiGI SUCCESS [done]

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-24 21:02:01.698
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-24 21:02:01.706
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:02:03.304
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.wXSGAiGI

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:02:03.305
!MESSAGE unsubscribing from classpath changes: sts4.classpath.wXSGAiGI

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:02:03.306
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 21:02:03.306
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.wXSGAiGI => OK

!ENTRY org.eclipse.ui 2 2 2022-12-24 21:02:05.464
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-24 22:31:34.705 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-24 22:31:40.618
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-24 22:31:40.618
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@13976c57,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@10b7b5f0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-24 22:31:45.774
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-24 22:31:45.775
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-24 22:31:45.890
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-24 22:31:47.439
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-24 22:31:47.460
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui 2 2 2022-12-24 22:31:52.272
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.core.jobs 4 2 2022-12-24 22:31:53.069
!MESSAGE An internal error occurred during: "Deferred Early Start".
!STACK 0
java.lang.NullPointerException: Cannot invoke "org.eclipse.equinox.log.ExtendedLogReaderService.addLogListener(org.osgi.service.log.LogListener, org.eclipse.equinox.log.LogFilter)" because "logReader" is null
	at org.eclipse.core.internal.runtime.InternalPlatform.getLog(InternalPlatform.java:365)
	at org.eclipse.core.runtime.Plugin.getLog(Plugin.java:237)
	at org.eclipse.oomph.util.OomphPlugin.getLog(OomphPlugin.java:221)
	at org.eclipse.oomph.util.OomphPlugin.log(OomphPlugin.java:236)
	at org.eclipse.oomph.util.OomphPlugin.log(OomphPlugin.java:247)
	at org.eclipse.oomph.internal.ui.EarlyStart.run(EarlyStart.java:122)
	at org.eclipse.oomph.internal.ui.EarlyStart$1.run(EarlyStart.java:97)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
!SESSION 2022-12-24 22:58:30.141 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -data C:\Users\yadav\eclipse-workspace -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-24 22:58:35.107
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-24 22:58:35.107
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@3180131e,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@62376bdd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-24 22:58:40.504
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-24 22:58:40.504
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-24 22:58:40.647
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-24 22:58:42.098
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-24 22:58:42.113
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:55.518
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:55.519
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@32decca2[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:55.523
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:55.556
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.352
!MESSAGE Boot LS startup time from start to initialized: 2814ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.650
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.CfuHvVdFisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.655
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.658
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.659
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.660
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.CfuHvVdF => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.661
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.666
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.667
!MESSAGE buffering callback sts4.classpath.CfuHvVdF Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.668
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.671
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.673
!MESSAGE buffering callback sts4.classpath.CfuHvVdF AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.673
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.676
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.678
!MESSAGE buffering callback sts4.classpath.CfuHvVdF AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.679
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.681
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.683
!MESSAGE buffering callback sts4.classpath.CfuHvVdF Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.683
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.687
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.689
!MESSAGE buffering callback sts4.classpath.CfuHvVdF Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.690
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.692
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.693
!MESSAGE buffering callback sts4.classpath.CfuHvVdF Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.695
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.701
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.705
!MESSAGE buffering callback sts4.classpath.CfuHvVdF Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.706
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.707
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.710
!MESSAGE buffering callback sts4.classpath.CfuHvVdF playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:58.711
!MESSAGE executing callback sts4.classpath.CfuHvVdF 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 22:58:59.322
!MESSAGE executing callback sts4.classpath.CfuHvVdF SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 23:00:56.879
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.CfuHvVdF

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 23:00:56.880
!MESSAGE unsubscribing from classpath changes: sts4.classpath.CfuHvVdF

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 23:00:56.881
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-24 23:00:56.882
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.CfuHvVdF => OK

!ENTRY org.eclipse.ui 2 2 2022-12-24 23:00:57.506
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-25 08:43:36.942 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-25 08:43:50.019
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-25 08:43:50.019
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@267a8777,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@175c26ff,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:01.539
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:01.540
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@795405c3[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:01.550
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:01.758
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 08:44:02.931
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 08:44:02.932
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-25 08:44:03.061
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 08:44:05.113
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 08:44:05.120
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:06.267
!MESSAGE Boot LS startup time from start to initialized: 4699ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.089
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hDFHdwaBisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.093
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.095
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.097
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.097
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.098
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hDFHdwaB => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.101
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.102
!MESSAGE buffering callback sts4.classpath.hDFHdwaB Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.103
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.115
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.116
!MESSAGE buffering callback sts4.classpath.hDFHdwaB AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.117
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.119
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.120
!MESSAGE buffering callback sts4.classpath.hDFHdwaB AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.121
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.126
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.127
!MESSAGE buffering callback sts4.classpath.hDFHdwaB Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.127
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.130
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.131
!MESSAGE buffering callback sts4.classpath.hDFHdwaB Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.132
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.134
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.135
!MESSAGE buffering callback sts4.classpath.hDFHdwaB Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.135
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.150
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.152
!MESSAGE buffering callback sts4.classpath.hDFHdwaB Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.153
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.155
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.156
!MESSAGE buffering callback sts4.classpath.hDFHdwaB playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.157
!MESSAGE executing callback sts4.classpath.hDFHdwaB 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:44:07.732
!MESSAGE executing callback sts4.classpath.hDFHdwaB SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:47:33.723
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hDFHdwaB

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:47:33.725
!MESSAGE unsubscribing from classpath changes: sts4.classpath.hDFHdwaB

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:47:33.774
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 08:47:33.775
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hDFHdwaB => OK

!ENTRY org.eclipse.ui 2 2 2022-12-25 08:47:34.628
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-25 09:04:32.767 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -data C:\Users\yadav\eclipse-workspace -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-25 09:04:43.308
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-25 09:04:43.308
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@485547ac,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6d77d269,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:55.586
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:55.586
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@2fb254c7[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:55.594
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:55.759
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 09:04:56.825
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 09:04:56.825
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-25 09:04:56.889
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 09:04:58.323
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 09:04:58.333
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:58.627
!MESSAGE Boot LS startup time from start to initialized: 3018ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.430
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.bNCjrrmLisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.435
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.438
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.439
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.440
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.bNCjrrmL => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.441
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.445
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.446
!MESSAGE buffering callback sts4.classpath.bNCjrrmL Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.448
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.450
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.452
!MESSAGE buffering callback sts4.classpath.bNCjrrmL AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.453
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.455
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.456
!MESSAGE buffering callback sts4.classpath.bNCjrrmL AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.457
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.459
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.462
!MESSAGE buffering callback sts4.classpath.bNCjrrmL Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.465
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.467
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.470
!MESSAGE buffering callback sts4.classpath.bNCjrrmL Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.471
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.474
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.476
!MESSAGE buffering callback sts4.classpath.bNCjrrmL Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.477
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.482
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.485
!MESSAGE buffering callback sts4.classpath.bNCjrrmL Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.486
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.489
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.490
!MESSAGE buffering callback sts4.classpath.bNCjrrmL playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.491
!MESSAGE executing callback sts4.classpath.bNCjrrmL 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:04:59.978
!MESSAGE executing callback sts4.classpath.bNCjrrmL SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:05:31.978
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.bNCjrrmL

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:05:31.979
!MESSAGE unsubscribing from classpath changes: sts4.classpath.bNCjrrmL

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:05:31.981
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:05:31.981
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.bNCjrrmL => OK

!ENTRY org.eclipse.ui 2 2 2022-12-25 09:05:32.881
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-25 09:13:15.098 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product -data C:\Users\yadav\eclipse-workspace -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-25 09:13:19.448
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-25 09:13:19.448
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6d77d269,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@350d9d23,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:26.471
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:26.471
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@4d29b723[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:26.474
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:26.518
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 09:13:27.844
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-25 09:13:27.845
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-25 09:13:27.966
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:28.887
!MESSAGE Boot LS startup time from start to initialized: 2399ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.144
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.SJXQKWGtisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.148
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.151
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.153
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.154
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.154
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.SJXQKWGt => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.158
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.159
!MESSAGE buffering callback sts4.classpath.SJXQKWGt Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.160
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.164
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.165
!MESSAGE buffering callback sts4.classpath.SJXQKWGt AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.166
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.168
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.169
!MESSAGE buffering callback sts4.classpath.SJXQKWGt AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.170
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.172
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.173
!MESSAGE buffering callback sts4.classpath.SJXQKWGt Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.174
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.242
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.244
!MESSAGE buffering callback sts4.classpath.SJXQKWGt Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.244
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.247
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.248
!MESSAGE buffering callback sts4.classpath.SJXQKWGt Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.249
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.253
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.256
!MESSAGE buffering callback sts4.classpath.SJXQKWGt Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.257
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.259
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.260
!MESSAGE buffering callback sts4.classpath.SJXQKWGt playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.261
!MESSAGE executing callback sts4.classpath.SJXQKWGt 8 batched events

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 09:13:29.588
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-25 09:13:29.589
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:13:29.850
!MESSAGE executing callback sts4.classpath.SJXQKWGt SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:16:05.928
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.SJXQKWGt

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:16:05.930
!MESSAGE unsubscribing from classpath changes: sts4.classpath.SJXQKWGt

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:16:05.932
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-25 09:16:05.932
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.SJXQKWGt => OK

!ENTRY org.eclipse.ui 2 2 2022-12-25 09:16:06.800
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-29 23:15:47.286 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product -data C:\Users\yadav\eclipse-workspace -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-29 23:15:52.142
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-29 23:15:52.142
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6f9b5f01,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@6859bbd4,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:05.212
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:05.213
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@3a2e0822[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:05.216
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:05.273
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-29 23:16:06.762
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-29 23:16:06.764
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-29 23:16:06.832
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.073
!MESSAGE Boot LS startup time from start to initialized: 2830ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.341
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.HFLICgOqisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.347
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.350
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.351
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.352
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.353
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.HFLICgOq => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.358
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.359
!MESSAGE buffering callback sts4.classpath.HFLICgOq Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.361
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.372
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.374
!MESSAGE buffering callback sts4.classpath.HFLICgOq AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.375
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.377
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.378
!MESSAGE buffering callback sts4.classpath.HFLICgOq AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.379
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.384
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.385
!MESSAGE buffering callback sts4.classpath.HFLICgOq Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.386
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.389
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.391
!MESSAGE buffering callback sts4.classpath.HFLICgOq Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.392
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.394
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.395
!MESSAGE buffering callback sts4.classpath.HFLICgOq Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.396
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.417
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.420
!MESSAGE buffering callback sts4.classpath.HFLICgOq Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.421
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.424
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.425
!MESSAGE buffering callback sts4.classpath.HFLICgOq playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:08.426
!MESSAGE executing callback sts4.classpath.HFLICgOq 8 batched events

!ENTRY org.eclipse.ui.ide 4 4 2022-12-29 23:16:08.619
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-29 23:16:08.621
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-29 23:16:09.321
!MESSAGE executing callback sts4.classpath.HFLICgOq SUCCESS [done]

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:07.796
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:07.809
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:08.970
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:08.974
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:10.207
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:10.211
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:13.182
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-29 23:18:13.185
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 01:47:50.943
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.ui 2 2 2022-12-30 01:53:16.047
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 02:32:14.368
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 12:26:38.248
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 12:35:29.448
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:29:24.435
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:49:09.046
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:50:49.409
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:51:45.166
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:52:10.406
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 13:52:41.659
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:05:37.043
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:06:02.740
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:11:20.609
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:12:50.224
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:12:59.225
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 14:55:10.370
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 15:16:22.378
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.HFLICgOq

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 15:16:22.379
!MESSAGE unsubscribing from classpath changes: sts4.classpath.HFLICgOq

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 15:16:22.380
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 15:16:22.380
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.HFLICgOq => OK
!SESSION 2022-12-30 18:37:43.522 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 18:37:57.771
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 18:37:57.771
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@10b7b5f0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@80b70fd,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 18:38:05.876
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 18:38:05.876
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 18:38:05.959
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 18:38:08.124
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 18:38:08.148
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:21.866
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:21.867
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@6f0b2862[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:21.880
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:22.089
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:24.536
!MESSAGE Boot LS startup time from start to initialized: 2639ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.388
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hvBvMzMDisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.392
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.395
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.396
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.396
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.397
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.hvBvMzMD => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.402
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.404
!MESSAGE buffering callback sts4.classpath.hvBvMzMD Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.405
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.408
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.409
!MESSAGE buffering callback sts4.classpath.hvBvMzMD AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.410
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.412
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.413
!MESSAGE buffering callback sts4.classpath.hvBvMzMD AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.414
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.415
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.416
!MESSAGE buffering callback sts4.classpath.hvBvMzMD Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.417
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.421
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.422
!MESSAGE buffering callback sts4.classpath.hvBvMzMD Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.423
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.425
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.426
!MESSAGE buffering callback sts4.classpath.hvBvMzMD Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.427
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.447
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.450
!MESSAGE buffering callback sts4.classpath.hvBvMzMD Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.451
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.453
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.455
!MESSAGE buffering callback sts4.classpath.hvBvMzMD playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:25.455
!MESSAGE executing callback sts4.classpath.hvBvMzMD 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:38:26.026
!MESSAGE executing callback sts4.classpath.hvBvMzMD SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-12-30 18:44:22.589
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:44:49.986
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hvBvMzMD

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:44:49.988
!MESSAGE unsubscribing from classpath changes: sts4.classpath.hvBvMzMD

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:44:49.989
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:44:49.990
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.hvBvMzMD => OK
!SESSION 2022-12-30 18:59:24.773 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 18:59:34.337
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 18:59:34.337
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@175c26ff,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@623bdc46,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:41.886
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:41.887
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@3c1b057[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:41.935
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:41.973
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 18:59:43.194
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 18:59:43.195
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 18:59:43.292
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.013
!MESSAGE Boot LS startup time from start to initialized: 3064ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.287
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.HNILeZyLisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.292
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.295
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.296
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.296
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.297
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.HNILeZyL => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.303
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.305
!MESSAGE buffering callback sts4.classpath.HNILeZyL Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.306
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.308
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.310
!MESSAGE buffering callback sts4.classpath.HNILeZyL AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.311
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.313
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.314
!MESSAGE buffering callback sts4.classpath.HNILeZyL AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.315
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.316
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.317
!MESSAGE buffering callback sts4.classpath.HNILeZyL Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.318
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.320
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.321
!MESSAGE buffering callback sts4.classpath.HNILeZyL Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.322
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.324
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.325
!MESSAGE buffering callback sts4.classpath.HNILeZyL Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.326
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.329
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.332
!MESSAGE buffering callback sts4.classpath.HNILeZyL Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.333
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.335
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.336
!MESSAGE buffering callback sts4.classpath.HNILeZyL playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.337
!MESSAGE executing callback sts4.classpath.HNILeZyL 8 batched events

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 18:59:45.437
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 18:59:45.439
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 18:59:45.825
!MESSAGE executing callback sts4.classpath.HNILeZyL SUCCESS [done]

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 19:01:30.966
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 19:04:23.419
!MESSAGE Timeout waiting for data to generate LS hover
!STACK 0
java.util.concurrent.TimeoutException
	at java.base/java.util.concurrent.CompletableFuture.timedGet(CompletableFuture.java:1950)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2085)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:12:45.249
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.HNILeZyL

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:12:45.250
!MESSAGE unsubscribing from classpath changes: sts4.classpath.HNILeZyL

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:12:45.252
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:12:45.253
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.HNILeZyL => OK

!ENTRY org.eclipse.ui 2 2 2022-12-30 19:12:45.930
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-30 19:17:06.618 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 19:17:19.589
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 19:17:19.589
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@13976c57,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@10b7b5f0,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:28.402
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:28.403
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@497a1249[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:28.407
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:28.459
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 19:17:29.765
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 19:17:29.766
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 19:17:29.806
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.454
!MESSAGE Boot LS startup time from start to initialized: 3028ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.748
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.OUZTSDDYisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.752
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.754
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.755
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.756
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.OUZTSDDY => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.771
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.775
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.776
!MESSAGE buffering callback sts4.classpath.OUZTSDDY Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.777
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.856
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.857
!MESSAGE buffering callback sts4.classpath.OUZTSDDY AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.877
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.878
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.880
!MESSAGE buffering callback sts4.classpath.OUZTSDDY AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.881
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.882
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.883
!MESSAGE buffering callback sts4.classpath.OUZTSDDY Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.884
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.886
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.888
!MESSAGE buffering callback sts4.classpath.OUZTSDDY Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.889
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.890
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.891
!MESSAGE buffering callback sts4.classpath.OUZTSDDY Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.892
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.895
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.897
!MESSAGE buffering callback sts4.classpath.OUZTSDDY Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.898
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.900
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.901
!MESSAGE buffering callback sts4.classpath.OUZTSDDY playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:31.902
!MESSAGE executing callback sts4.classpath.OUZTSDDY 8 batched events

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 19:17:32.018
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 19:17:32.019
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:17:32.422
!MESSAGE executing callback sts4.classpath.OUZTSDDY SUCCESS [done]

!ENTRY org.eclipse.ui 2 2 2022-12-30 19:20:55.274
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:21:23.895
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.OUZTSDDY

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:21:23.897
!MESSAGE unsubscribing from classpath changes: sts4.classpath.OUZTSDDY

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:21:23.898
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 19:21:23.898
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.OUZTSDDY => OK
!SESSION 2022-12-30 20:13:01.405 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 20:13:12.343
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 20:13:12.343
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@411576c7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@332610ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:25.129
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:25.130
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@3efbd79f[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:25.140
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:25.349
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 20:13:26.673
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 20:13:26.673
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 20:13:26.712
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:28.848
!MESSAGE Boot LS startup time from start to initialized: 3686ms

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 20:13:29.134
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 20:13:29.136
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.809
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.NZFyEheoisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.814
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.817
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.818
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.819
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.NZFyEheo => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.820
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.843
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.845
!MESSAGE buffering callback sts4.classpath.NZFyEheo Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.847
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.850
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.852
!MESSAGE buffering callback sts4.classpath.NZFyEheo AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.853
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.856
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.858
!MESSAGE buffering callback sts4.classpath.NZFyEheo AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.859
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.860
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.862
!MESSAGE buffering callback sts4.classpath.NZFyEheo Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.863
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.869
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.871
!MESSAGE buffering callback sts4.classpath.NZFyEheo Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.872
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.874
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.875
!MESSAGE buffering callback sts4.classpath.NZFyEheo Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.876
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.899
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.902
!MESSAGE buffering callback sts4.classpath.NZFyEheo Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.903
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.906
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.908
!MESSAGE buffering callback sts4.classpath.NZFyEheo playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:29.909
!MESSAGE executing callback sts4.classpath.NZFyEheo 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:13:30.996
!MESSAGE executing callback sts4.classpath.NZFyEheo SUCCESS [done]

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 20:33:02.815
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.ui 2 2 2022-12-30 20:36:38.019
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:44:32.349
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.NZFyEheo

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:44:32.350
!MESSAGE unsubscribing from classpath changes: sts4.classpath.NZFyEheo

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:44:32.351
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:44:32.351
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.NZFyEheo => OK
!SESSION 2022-12-30 20:47:10.812 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 20:48:05.788
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 20:48:05.788
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@5af7e2f,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@2df24f19,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:33.908
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:33.908
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@6208a581[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:33.912
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:33.965
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 20:48:35.307
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 20:48:35.309
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 20:48:35.431
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 20:48:37.126
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 20:48:37.137
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.499
!MESSAGE Boot LS startup time from start to initialized: 3567ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.857
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JmKbRRxDisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.861
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.864
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.865
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.866
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JmKbRRxD => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.867
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.872
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.874
!MESSAGE buffering callback sts4.classpath.JmKbRRxD Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.875
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.878
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.879
!MESSAGE buffering callback sts4.classpath.JmKbRRxD AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.880
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.882
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.883
!MESSAGE buffering callback sts4.classpath.JmKbRRxD AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.884
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.885
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.886
!MESSAGE buffering callback sts4.classpath.JmKbRRxD Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.887
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.889
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.890
!MESSAGE buffering callback sts4.classpath.JmKbRRxD Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.891
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.893
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.895
!MESSAGE buffering callback sts4.classpath.JmKbRRxD Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.896
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.899
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.902
!MESSAGE buffering callback sts4.classpath.JmKbRRxD Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.902
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.904
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.906
!MESSAGE buffering callback sts4.classpath.JmKbRRxD playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:37.906
!MESSAGE executing callback sts4.classpath.JmKbRRxD 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:48:38.559
!MESSAGE executing callback sts4.classpath.JmKbRRxD SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:51:31.082
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JmKbRRxD

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:51:31.083
!MESSAGE unsubscribing from classpath changes: sts4.classpath.JmKbRRxD

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:51:31.085
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 20:51:31.086
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JmKbRRxD => OK

!ENTRY org.eclipse.ui 2 2 2022-12-30 20:51:31.722
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-31 00:49:27.548 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-31 00:49:33.524
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-31 00:49:33.524
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@11c40a65,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@68c3aa38,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:40.167
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:40.168
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@7e906f43[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:40.172
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:40.228
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 00:49:41.497
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 00:49:41.498
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-31 00:49:41.597
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 00:49:43.156
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 00:49:43.164
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:43.691
!MESSAGE Boot LS startup time from start to initialized: 3500ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.014
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.qZDLvhYjisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.029
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.032
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.033
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.034
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.qZDLvhYj => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.035
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.039
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.041
!MESSAGE buffering callback sts4.classpath.qZDLvhYj Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.042
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.044
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.046
!MESSAGE buffering callback sts4.classpath.qZDLvhYj AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.046
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.048
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.050
!MESSAGE buffering callback sts4.classpath.qZDLvhYj AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.051
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.052
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.053
!MESSAGE buffering callback sts4.classpath.qZDLvhYj Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.054
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.056
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.057
!MESSAGE buffering callback sts4.classpath.qZDLvhYj Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.058
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.060
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.061
!MESSAGE buffering callback sts4.classpath.qZDLvhYj Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.062
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.065
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.068
!MESSAGE buffering callback sts4.classpath.qZDLvhYj Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.068
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.071
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.072
!MESSAGE buffering callback sts4.classpath.qZDLvhYj playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.073
!MESSAGE executing callback sts4.classpath.qZDLvhYj 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:49:44.787
!MESSAGE executing callback sts4.classpath.qZDLvhYj SUCCESS [done]

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 00:54:56.312
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 00:55:19.755
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:37.058
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:37.065
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:40.659
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:40.662
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:41.375
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:41.379
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:42.437
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.m2e.logback.appender 2 0 2022-12-31 00:56:42.441
!MESSAGE Using platform encoding (Cp1252 actually) to copy filtered resources, i.e. build is platform dependent!

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 01:25:39.996
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 01:44:00.195
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 01:44:10.920
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 02:03:13.590
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:32:46.245
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.qZDLvhYj

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:32:46.245
!MESSAGE unsubscribing from classpath changes: sts4.classpath.qZDLvhYj

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:32:46.245
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:32:46.247
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.qZDLvhYj => OK

!ENTRY org.eclipse.ui 2 2 2022-12-31 02:32:46.682
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-31 02:34:17.543 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-31 02:34:24.489
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-31 02:34:24.489
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@332610ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@45bbb3e8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:30.600
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:30.601
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@42191784[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:30.604
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:30.654
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 02:34:31.843
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 02:34:31.843
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-31 02:34:32.006
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:33.747
!MESSAGE Boot LS startup time from start to initialized: 3125ms

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 02:34:33.946
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 02:34:33.948
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.125
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JWOvvEguisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.129
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.133
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.134
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.135
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.135
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JWOvvEgu => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.141
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.143
!MESSAGE buffering callback sts4.classpath.JWOvvEgu Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.144
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.146
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.150
!MESSAGE buffering callback sts4.classpath.JWOvvEgu AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.151
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.153
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.155
!MESSAGE buffering callback sts4.classpath.JWOvvEgu AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.156
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.157
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.158
!MESSAGE buffering callback sts4.classpath.JWOvvEgu Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.159
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.161
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.163
!MESSAGE buffering callback sts4.classpath.JWOvvEgu Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.164
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.166
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.167
!MESSAGE buffering callback sts4.classpath.JWOvvEgu Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.168
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.172
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.175
!MESSAGE buffering callback sts4.classpath.JWOvvEgu Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.177
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.179
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.180
!MESSAGE buffering callback sts4.classpath.JWOvvEgu playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.181
!MESSAGE executing callback sts4.classpath.JWOvvEgu 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:34:34.714
!MESSAGE executing callback sts4.classpath.JWOvvEgu SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:38:06.423
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JWOvvEgu

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:38:06.423
!MESSAGE unsubscribing from classpath changes: sts4.classpath.JWOvvEgu

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:38:06.424
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 02:38:06.424
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JWOvvEgu => OK

!ENTRY org.eclipse.ui 2 2 2022-12-31 02:38:06.938
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-30 21:40:49.335 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 21:40:57.233
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 21:40:57.233
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@332610ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@45bbb3e8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:03.794
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:03.795
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@7b915552[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:03.799
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:03.873
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 21:41:05.145
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 21:41:05.146
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 21:41:05.283
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 21:41:06.627
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 21:41:06.635
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.521
!MESSAGE Boot LS startup time from start to initialized: 3703ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.867
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JaibkZhYisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.873
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.876
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.877
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.878
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.JaibkZhY => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.879
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.895
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.897
!MESSAGE buffering callback sts4.classpath.JaibkZhY Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.898
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.901
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.902
!MESSAGE buffering callback sts4.classpath.JaibkZhY AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.903
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.905
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.906
!MESSAGE buffering callback sts4.classpath.JaibkZhY AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.907
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.909
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.910
!MESSAGE buffering callback sts4.classpath.JaibkZhY Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.912
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.916
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.919
!MESSAGE buffering callback sts4.classpath.JaibkZhY Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.921
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.923
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.924
!MESSAGE buffering callback sts4.classpath.JaibkZhY Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.925
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.944
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.947
!MESSAGE buffering callback sts4.classpath.JaibkZhY Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.948
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.952
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.954
!MESSAGE buffering callback sts4.classpath.JaibkZhY playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:07.954
!MESSAGE executing callback sts4.classpath.JaibkZhY 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:41:08.562
!MESSAGE executing callback sts4.classpath.JaibkZhY SUCCESS [done]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:50:53.617
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JaibkZhY

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:50:53.618
!MESSAGE unsubscribing from classpath changes: sts4.classpath.JaibkZhY

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:50:53.619
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 21:50:53.620
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.JaibkZhY => OK

!ENTRY org.eclipse.ui 2 2 2022-12-30 21:50:54.143
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-30 22:08:17.665 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-30 22:08:46.573
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-30 22:08:46.573
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@45bbb3e8,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@795e8ef5,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:08:58.571
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:08:58.572
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@66e65af5[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:08:58.581
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:08:58.763
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 22:08:59.945
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-30 22:08:59.946
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-30 22:09:00.089
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:02.406
!MESSAGE Boot LS startup time from start to initialized: 3807ms

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 22:09:02.559
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-30 22:09:02.567
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.480
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.UgEZLnEwisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.485
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.488
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.489
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.490
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.UgEZLnEw => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.491
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.512
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.516
!MESSAGE buffering callback sts4.classpath.UgEZLnEw Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.518
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.521
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.523
!MESSAGE buffering callback sts4.classpath.UgEZLnEw AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.524
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.527
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.528
!MESSAGE buffering callback sts4.classpath.UgEZLnEw AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.529
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.531
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.531
!MESSAGE buffering callback sts4.classpath.UgEZLnEw Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.532
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.566
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.567
!MESSAGE buffering callback sts4.classpath.UgEZLnEw Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.568
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.572
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.575
!MESSAGE buffering callback sts4.classpath.UgEZLnEw Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.577
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.616
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.621
!MESSAGE buffering callback sts4.classpath.UgEZLnEw Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.622
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.625
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.627
!MESSAGE buffering callback sts4.classpath.UgEZLnEw playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:03.628
!MESSAGE executing callback sts4.classpath.UgEZLnEw 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-30 22:09:04.181
!MESSAGE executing callback sts4.classpath.UgEZLnEw SUCCESS [done]

!ENTRY org.eclipse.lsp4e 2 0 2022-12-30 23:41:04.528
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 00:23:49.179
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.lsp4e 2 0 2022-12-31 00:29:30.948
!MESSAGE Javadoc unavailable. Failed to obtain it.
!STACK 0
java.lang.InterruptedException
	at java.base/java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:385)
	at java.base/java.util.concurrent.CompletableFuture.get(CompletableFuture.java:2086)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.getHoverInfo2(LSJavaHoverProvider.java:70)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:36:08.759
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.UgEZLnEw

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:36:08.760
!MESSAGE unsubscribing from classpath changes: sts4.classpath.UgEZLnEw

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:36:08.761
!MESSAGE subsribers = {}

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 00:36:08.761
!MESSAGE ClasspathListenerHandler removeClasspathListener sts4.classpath.UgEZLnEw => OK

!ENTRY org.eclipse.ui 2 2 2022-12-31 00:36:09.513
!MESSAGE Invalid property category path: org.springframework.ide.eclipse.beans.ui.properties.ProjectPropertyPage (bundle: org.springframework.ide.eclipse.xml.namespaces, propertyPage: org.springframework.ide.eclipse.beans.ui.namespaces.projectPropertyPage)
!SESSION 2022-12-31 09:07:51.634 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=15.0.2
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

!ENTRY org.eclipse.jface 2 0 2022-12-31 09:08:02.584
!MESSAGE Keybinding conflicts occurred.  They may interfere with normal accelerator operation.
!SUBENTRY 1 org.eclipse.jface 2 0 2022-12-31 09:08:02.584
!MESSAGE A conflict occurred for CTRL+SHIFT+T:
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.jdt.ui.navigate.open.type,Open Type,
		Open a type in a Java editor,
		Category(org.eclipse.ui.category.navigate,Navigate,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@411576c7,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)
Binding(CTRL+SHIFT+T,
	ParameterizedCommand(Command(org.eclipse.lsp4e.symbolinworkspace,Go to Symbol in Workspace,
		,
		Category(org.eclipse.lsp4e.category,Language Servers,null,true),
		org.eclipse.ui.internal.WorkbenchHandlerServiceHandler@332610ad,
		,,true),null),
	org.eclipse.ui.defaultAcceleratorConfiguration,
	org.eclipse.ui.contexts.window,,,system)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:12.565
!MESSAGE Entering DelegatingStreamConnectionProvider()

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:12.565
!MESSAGE DelegatingStreamConnectionProvider classloader = org.eclipse.osgi.internal.loader.EquinoxClassLoader@2c54c070[org.springframework.tooling.boot.ls:1.25.0.202103111026(id=964)]

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:12.574
!MESSAGE SpringBootLanguageServer exists!

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:12.776
!MESSAGE Instantiating ReusableClasspathListenerHandler

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 09:08:13.856
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.ui.navigator 2 0 2022-12-31 09:08:13.857
!MESSAGE Can't find Navigator Content Descriptor with id: org.eclipse.jst.servlet.ui.EnhancedJavaRendering

!ENTRY org.eclipse.egit.ui 2 0 2022-12-31 09:08:13.935
!MESSAGE Warning: The environment variable HOME is not set. The following directory will be used to store the Git
user global configuration and to define the default location to store repositories: 'C:\Users\yadav'. If this is
not correct please set the HOME environment variable and restart Eclipse. Otherwise Git for Windows and
EGit might behave differently since they see different configuration options.
This warning can be switched off on the Team > Git > Confirmations and Warnings preference page.

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 09:08:15.392
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui.ide 4 4 2022-12-31 09:08:15.400
!MESSAGE Not properly disposed SWT resource
!STACK 0
java.lang.Error: SWT Resource was not properly disposed
	at org.eclipse.swt.graphics.Resource.initNonDisposeTracking(Resource.java:172)
	at org.eclipse.swt.graphics.Resource.<init>(Resource.java:120)
	at org.eclipse.swt.graphics.Image.<init>(Image.java:165)
	at org.eclipse.swt.graphics.Image.win32_new(Image.java:2163)
	at org.eclipse.swt.widgets.TaskBar.createShellLink(TaskBar.java:168)
	at org.eclipse.swt.widgets.TaskBar.createShellLinkArray(TaskBar.java:208)
	at org.eclipse.swt.widgets.TaskBar.setMenu(TaskBar.java:382)
	at org.eclipse.swt.widgets.TaskItem.setMenu(TaskItem.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.setMenuOnTaskItem(TaskBarManager.java:121)
	at org.eclipse.mylyn.commons.workbench.TaskBarManager$TaskBarMenuManager.update(TaskBarManager.java:112)
	at org.eclipse.jface.action.MenuManager.update(MenuManager.java:673)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.addSystemTaskBarActions(TasksUiPlugin.java:479)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin.access$7(TasksUiPlugin.java:458)
	at org.eclipse.mylyn.internal.tasks.ui.TasksUiPlugin$TasksUiInitializationJob.runInUIThread(TasksUiPlugin.java:394)
	at org.eclipse.ui.progress.UIJob.lambda$0(UIJob.java:95)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:16.578
!MESSAGE Boot LS startup time from start to initialized: 3985ms

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.279
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.IwoNBlXAisBatched = true

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.284
!MESSAGE Setting up ClasspathListenerManager

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.286
!MESSAGE Scheduling initial event for all projects ...

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.287
!MESSAGE Scheduling initial event for all projects DONE

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.288
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.289
!MESSAGE ClasspathListenerHandler addClasspathListener sts4.classpath.IwoNBlXA => OK

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.301
!MESSAGE classpath=50 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.303
!MESSAGE buffering callback sts4.classpath.IwoNBlXA Gambler's Dharma false 50

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.304
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.305
!MESSAGE classpath=43 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.307
!MESSAGE buffering callback sts4.classpath.IwoNBlXA AutoBet 99EXCH false 43

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.308
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.309
!MESSAGE classpath=28 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.310
!MESSAGE buffering callback sts4.classpath.IwoNBlXA AutoBet DreamIPL9 false 28

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.311
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.312
!MESSAGE classpath=6 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.313
!MESSAGE buffering callback sts4.classpath.IwoNBlXA Core Java false 6

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.314
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.316
!MESSAGE classpath=32 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.317
!MESSAGE buffering callback sts4.classpath.IwoNBlXA Cuspal Transit Tracker false 32

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.318
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.319
!MESSAGE classpath=35 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.320
!MESSAGE buffering callback sts4.classpath.IwoNBlXA Moon Transit Tracker false 35

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.321
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.336
!MESSAGE classpath=89 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.338
!MESSAGE buffering callback sts4.classpath.IwoNBlXA Stadium Service false 89

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.338
!MESSAGE exists = true open = true => deleted = false

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.340
!MESSAGE classpath=29 entries

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.341
!MESSAGE buffering callback sts4.classpath.IwoNBlXA playground false 29

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.342
!MESSAGE executing callback sts4.classpath.IwoNBlXA 8 batched events

!ENTRY org.springframework.tooling.ls.eclipse.commons 1 0 2022-12-31 09:08:17.825
!MESSAGE executing callback sts4.classpath.IwoNBlXA SUCCESS [done]

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:45.006
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+\"'\"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2022-12-31 11:54:45.008
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2022-12-31 11:54:45.010
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:45.078
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+\"'\"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-31 11:54:45.080
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-31 11:54:45.081
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:128)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:45.141
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+\"'\"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1031)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.ui 4 0 2022-12-31 11:54:45.143
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.internal.core.manipulation.dom.ASTResolving.createQuickFixAST(ASTResolving.java:1031)
	at org.eclipse.jdt.internal.ui.text.correction.AssistContext.getASTRoot(AssistContext.java:131)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getJavaAnnotationFixes(ProblemHover.java:101)
	at org.eclipse.jdt.internal.ui.text.java.hover.ProblemHover$ProblemInfo.getCompletionProposals(ProblemHover.java:79)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.deferredCreateContent(AbstractAnnotationHover.java:304)
	at org.eclipse.jdt.internal.ui.text.java.hover.AbstractAnnotationHover$AnnotationInformationControl.setInput(AbstractAnnotationHover.java:190)
	at org.eclipse.jface.text.AbstractInformationControlManager.internalShowInformationControl(AbstractInformationControlManager.java:1151)
	at org.eclipse.jface.text.AbstractInformationControlManager.presentInformation(AbstractInformationControlManager.java:1120)
	at org.eclipse.jface.text.AbstractHoverInformationControlManager.presentInformation(AbstractHoverInformationControlManager.java:884)
	at org.eclipse.jface.text.TextViewerHoverManager.doPresentInformation(TextViewerHoverManager.java:237)
	at org.eclipse.jface.text.TextViewerHoverManager.lambda$3(TextViewerHoverManager.java:227)
	at org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
	at org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
	at org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:4001)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3629)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1157)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1046)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:155)
	at org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:644)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:338)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:551)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:156)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:152)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:203)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:134)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:104)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:401)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:255)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:64)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:564)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:653)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:590)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1461)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:45.221
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+\"'\"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-31 11:54:45.222
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-31 11:54:45.223
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:46.047
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+\"'\"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2022-12-31 11:54:46.049
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2022-12-31 11:54:46.049
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2022-12-31 11:54:49.710
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.AstroSports.GamblerDharma;

import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.io.PrintStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFrame;
import javax.swing.JProgressBar;

import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeDriverService;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.remote.service.DriverService;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {
	
	static Multimap<Integer, Integer> planets_western;
	static Multimap<Integer, Integer> cusps_western;
	static HashBiMap<String, Integer> planets_id;
	static HashBiMap<Integer, String> retro;
	static HashMap<Integer, String> aspects;
	static Multimap<String, Integer> D1_Lords_Western;
	static HashBiMap<String, Integer> signs_id;
	static int DOF;
	
	public static void setMultiMaps(Multimap<Integer, Integer> planet_western, Multimap<Integer, Integer> cusp_western, HashBiMap<String, Integer> planet_id, HashBiMap<Integer, String> retros, HashMap<Integer, String> aspect, Multimap<String, Integer> D1_Lords_Westerns, HashBiMap<String, Integer> signs_ids, int dof) {
		planets_western = planet_western;
		cusps_western = cusp_western;
		planets_id = planet_id;
		retro = retros;
		aspects = aspect;
		D1_Lords_Western = D1_Lords_Westerns;
		signs_id = signs_ids;
		DOF = dof;
	}
	
	public static void calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb) {
		
		String p1;
		String p2;
		if(nor_apof1 == 4) {
			p1 = "Antiscion Of ";
		} else {
			p1 = "";
		}
		if(nor_apof2 == 4) {
			p2 = "Antiscion Of ";
		} else {
			p2 = "";
		}
		if(planet1 == DOF) {
			p1 = "Dispositor Of ";
		}
		if(planet2 == DOF) {
			p2 = "Dispositor Of ";
		}
		
		int planet1Sign = Iterables.get(planets_western.get(planet1), nor_apof1);
		int planet1Minutes = Iterables.get(planets_western.get(planet1), nor_apof1 + 1);
		int planet1HouseNo = Iterables.get(planets_western.get(planet1), nor_apof1 + 2);
		
		int planet2Sign = Iterables.get(planets_western.get(planet2), nor_apof1);
		int planet2Minutes = Iterables.get(planets_western.get(planet2), nor_apof1 + 1);
		int planet2HouseNo = Iterables.get(planets_western.get(planet2), nor_apof1 + 2);
		
		int ORB = Math.abs(planet2Minutes - planet1Minutes);
		int ASPECT = Math.abs(planet2HouseNo - planet1HouseNo);
		
		if(ASPECT == 10) {
			ASPECT = 2; // sextile
		} else if(ASPECT == 9) {
			ASPECT = 3; // square
		} else if(ASPECT == 8) {
			ASPECT = 4; // trine
		}
		
		if(apply == false) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		} else if(apply == true && planet2Minutes >= planet1Minutes) {
			if (ORB <= orb && ASPECT == aspect) {
				System.out.println("\n-> "+p1+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet1))+" "+planets_id.inverse().get(planet1)+retro.get(Iterables.get(planets_western.get(planet1), 0))+"("+planet1Minutes/60+"°"+planet1Minutes%60+"'"+signs_id.inverse().get(planet1Sign)+")"+" applying to "+aspects.get(aspect)+" "+p2+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet2))+" "+planets_id.inverse().get(planet2)+retro.get(Iterables.get(planets_western.get(planet2), 0))+"("+planet2Minutes/60+"°"+planet2Minutes%60+"'"+signs_id.inverse().get(planet2Sign)+")"+" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
			}
		}
		
	}
	
	public static void calculateCusps(int nor_apof, int planet, int cusp, int orb) {
		
		int planetSign = Iterables.get(planets_western.get(planet), nor_apof);
		int planetMinutes = Iterables.get(planets_western.get(planet), nor_apof + 1);
		int planetHouseNo = Iterables.get(planets_western.get(planet), nor_apof + 2);
		
		int cuspSign = Iterables.get(cusps_western.get(cusp), 0);
		int cuspMinutes = Iterables.get(cusps_western.get(cusp), 1);
		
		int ORB = Math.abs(cuspMinutes - planetMinutes);
		
		String OI;
		if(cuspMinutes >= planetMinutes) {
			OI = "ON";
		} else {
			OI = "INSIDE";
		}
		
		if(planetSign == cuspSign && planetHouseNo == cusp && ORB <= orb) {
			System.out.println("\n-> "+"L"+D1_Lords_Western.get(planets_id.inverse().get(planet))+" "+planets_id.inverse().get(planet)+retro.get(Iterables.get(planets_western.get(planet), 0))+"("+planetMinutes/60+"°"+planetMinutes%60+"'"+signs_id.inverse().get(planetSign)+")"+" "+OI+" "+cusp+" cusp+"("+cuspMinutes/60+\"°"+cuspMinutes%60+"'"+signs_id.inverse().get(cuspSign)+\")\" within orb of "+(ORB / 60)+"°"+(ORB % 60)+"'");
		}
		
	}
	
	public static void main(String[] args) throws Exception {
		
//		String fetched_uid = "null";
//		
//		InetAddress addr = InetAddress.getLocalHost();
//		NetworkInterface iface = NetworkInterface.getByInetAddress(addr);
//		byte[] mac = iface.getHardwareAddress();
//		StringBuilder sb = new StringBuilder();
//		for (int i = 0; i < mac.length; i++) {
//			sb.append(String.format("%02X%s", mac[i], (i < mac.length - 1) ? i+99 : ""));
//		}
//		String uid = sb.reverse().toString();
//		
//		System.out.println("License Key : "+uid+"\n");
//		try {
//			Class.forName("com.mysql.cj.jdbc.Driver");
//			Connection con = DriverManager.getConnection("jdbc:mysql://sql6.freesqldatabase.com:3306/sql6461715", "sql6461715", "a5E1HjtJhL");
//			String query = "select UID from License where UID = ?";
//			PreparedStatement pst = con.prepareStatement(query);
//			pst.setString(1, uid);
//			ResultSet set = pst.executeQuery();
//			while (set.next()) {
//				fetched_uid = set.getString(1);
//			}
//		} catch (Exception e) {
//			System.out.println("\nHuh huh  _(-_-)  Something went wrong while updating timezone for stadium in database............\n");
//			System.out.println(e.toString());
//		}
//		
//		if(fetched_uid.equals(uid)) {
//			System.out.println("License Check : License Validated");
		
		MyFrame frame1 = new MyFrame();
		
		String name = frame1.name.getText();
		DateFormat sysDate = new SimpleDateFormat("d-M-yyyy");
	    String sdate = sysDate.format(frame1.picker.getDate());
	    String date = sdate.split("-")[0];
	    String month = sdate.split("-")[1];
	    String year = sdate.split("-")[2];
		String hour = frame1.hour.getSelectedItem().toString();
		String minute = frame1.minute.getSelectedItem().toString();
		String second = frame1.second.getSelectedItem().toString();
		String stadium = frame1.stadium.getSelectedItem().toString();
		
		String sname = null;
		String latitude = null;
		String longitude = null;
		String timezone = null;

		System.out.println(
				"\n********* Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report *********\n\n");

//--------------------------------------------------------------------------------------------------------------------
//												STADIUM DATABASE
//--------------------------------------------------------------------------------------------------------------------
		
		if(!stadium.equals("ADD NEW STADIUM")) {
			if(stadium.equals("UPDATE EXISTING TIMEZONE")) {
				try {
					Class.forName("com.mysql.cj.jdbc.Driver");
					Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
					String query = "UPDATE stadiums SET timezone = ? WHERE alias = ? OR name like ?";
					PreparedStatement pst = con.prepareStatement(query);
					pst.setString(1, frame1.stimezone.getText());
					pst.setString(2, frame1.salias.getText());
					pst.setString(3, frame1.sname.getText());
					pst.executeUpdate();
					System.out.println("\nTimezone for Stadium "+frame1.sname.getText()+"("+frame1.salias.getText()+") Updated............");
					stadium = frame1.sname.getText();
					con.close();
				} catch (Exception e) {
					System.out.println("\nHuh huh  <(-_-)>  Something went wrong while updating timezone for stadium in database............\n");
					System.out.println(e.toString());
				}
			}
			try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
			String query = "select * from stadiums where name = ? OR alias = ?";
			PreparedStatement pst = con.prepareStatement(query);
			pst.setString(1, stadium);
			pst.setString(2, frame1.salias.getText());
			ResultSet set = pst.executeQuery();
			while (set.next()) {
				sname = set.getString(2);
				latitude = set.getString(3);
				longitude = set.getString(4);
				timezone = set.getString(5);
				System.out.println("\nYou have selected stadium : " + sname);
				System.out.println("Alias : " + set.getString(1));
				System.out.println("Latitude : " + latitude);
				System.out.println("Longitude : " + longitude);
				System.out.println("Timezone : " + timezone + "\n\n");
			} con.close();
		} catch (Exception e) {
			System.out.println(
					"\nHuh huh  <(-_-)>  Something went wrong while retrieving your stadium from database....\n");
			System.out.println(e);
		}

		} else {
			try {
				String stadium_alias = frame1.salias.getText();
				sname = frame1.sname.getText();
				latitude = frame1.slatitude.getText();
				longitude = frame1.slongitude.getText();
				timezone = frame1.stimezone.getText();
				Class.forName("com.mysql.cj.jdbc.Driver");
				Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/stadiums", "root", "root");
				String query = "insert into stadiums(alias,name,latitude,longitude,timezone) values(?,?,?,?,?)";
				PreparedStatement pst = con.prepareStatement(query);
				pst.setString(1, stadium_alias);
				pst.setString(2, sname);
				pst.setString(3, latitude);
				pst.setString(4, longitude);
				pst.setString(5, timezone);
				pst.executeUpdate();
				System.out.println("\nStadium "+sname+" added to database.");
				con.close();
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)> Something went wrong while adding your stadium to database....\n");
				System.out.println(e);
			}
		}

		PrintStream o = new PrintStream(new File("C://Users//yadav//Desktop//Gambler's Dharma//" + name + " " + sdate + ".txt"));
		PrintStream console = System.out;
		System.setOut(o);
		// System.setOut(console);

		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("Sports Contest Details :-\n");
		System.out.println("Name : " + name);
		System.out.println("Date : " + date + "-" + month + "-" + year);
		System.out.println("Time : " + hour + ":" + minute + ":" + second);
		System.out.println("Timezone : " + timezone);
		System.out.println("Stadium : " + sname);
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "\n\n");

		JFrame frame = new JFrame();
		JProgressBar bar = new JProgressBar(0, 100);
		bar.setValue(0);
		bar.setBounds(0, 0, 420, 50);
		bar.setStringPainted(true);
		bar.setFont(new Font("MV Boli", Font.BOLD, 25));
		bar.setForeground(Color.green);
		bar.setBackground(Color.gray);
		frame.add(bar);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(420, 420);
		frame.setLayout(null);
		frame.setAlwaysOnTop(true);
		frame.setVisible(true);
		frame.setResizable(false);

		HashBiMap<String, Integer> signs_id = HashBiMap.create();
		signs_id.put("Ari", 1);
		signs_id.put("Tau", 2);
		signs_id.put("Gem", 3);
		signs_id.put("Can", 4);
		signs_id.put("Leo", 5);
		signs_id.put("Vir", 6);
		signs_id.put("Lib", 7);
		signs_id.put("Sco", 8);
		signs_id.put("Sag", 9);
		signs_id.put("Cap", 10);
		signs_id.put("Aqu", 11);
		signs_id.put("Pis", 12);

		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		planets_id.put("Uranus", 10);
		planets_id.put("Neptune", 11);
		planets_id.put("Pluto", 12);
		planets_id.put("Upaketu", 13);
		planets_id.put("POF", 14);

		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");

		HashBiMap<Integer, String> retro = HashBiMap.create();
		retro.put(0, "");
		retro.put(1, "(R)");
		retro.put(2, "**");
		retro.put(3, "++");
		
		HashMap<Integer, Integer> antiscia = new HashMap<Integer, Integer>();
		antiscia.put(1, 6);
		antiscia.put(2, 5);
		antiscia.put(3, 4);
		antiscia.put(4, 3);
		antiscia.put(5, 2);
		antiscia.put(6, 1);
		antiscia.put(7, 12);
		antiscia.put(8, 11);
		antiscia.put(9, 10);
		antiscia.put(10, 9);
		antiscia.put(11, 8);
		antiscia.put(12, 7);
		
		HashMap<Integer, String> aspects = new HashMap<Integer, String>();
		aspects.put(0, "conjuct");
		aspects.put(2, "sextile");
		aspects.put(3, "square");
		aspects.put(4, "trine");
		aspects.put(6, "oppose");
		
//		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
//		OperaOptions options = new OperaOptions();
//		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
//		WebDriver driver = new OperaDriver(options);

		Logger.getLogger("org.openqa.selenium").setLevel(Level.OFF);

		System.setProperty("webdriver.chrome.driver", "D:\\drivers\\chromedriver.exe");
		System.setProperty("webdriver.chrome.silentOutput", "true");
		@SuppressWarnings("rawtypes")
		DriverService.Builder serviceBuilder = new ChromeDriverService.Builder().withSilent(true);
		ChromeOptions options = new ChromeOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Local\\Google\\Chrome\\User Data");
		options.addArguments("--headless");
		ChromeDriverService chromeDriverService = (ChromeDriverService) serviceBuilder.build();
		chromeDriverService.sendOutputTo(new OutputStream() {
			@Override
			public void write(int b) {
			}
		});
		WebDriver driver = new ChromeDriver(chromeDriverService, options);

		System.setOut(console);
		System.out.println(
				"\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report is being generating. This may take several minutes");
		System.setOut(o);

		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		driver.manage().window().maximize();

		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);

		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);

		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue(second);

		driver.findElement(By.id("m-advanced-geo-option")).click();

		driver.findElement(By.id("m-hr-lat")).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		driver.findElement(By.id("m-hr-lon")).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		driver.findElement(By.id("m-hr-tzone")).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);

		driver.findElement(By.id("m-submit-hr-form")).click();
		
//		Select ayanamsa = new Select(new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.id("hr-ayanamsa"))));
//		ayanamsa.selectByValue("LAHERI");
//
//		Thread.sleep(2500);

		Multimap<Integer, Integer> planets = ArrayListMultimap.create();
		Multimap<Integer, Integer> planets_western = ArrayListMultimap.create();

		// for loop for the 12 planets
		for (int i = 1; i <= 12; i++) {

			String planet_name = new WebDriverWait(driver, 60).until(ExpectedConditions.elementToBeClickable(By.xpath(
					"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
							+ i + "]/th")))
					.getText();

			// getting planet retro or not @ index 0
			if (planet_name.contains("(R)")) {
				planets.put(i, 1);
				planets_western.put(i, 1);
			} else {
				planets.put(i, 0);
				planets_western.put(i, 0);
			}

			// for loop for planet attributes
			for (int j = 1; j <= 7; j++) {

				// ignoring getting planet nakshatra name & planet sign lord
				if (j == 4 || j == 5) {
					continue;
				}

				String planet_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[2]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting planet sign @ index 1
				if (j == 1) {
					planets.put(i, signs_id.get(planet_prop));
				}

				// getting planet total minutes @ index 2
				if (j == 2) {
					if (planet_prop.charAt(1) == ':') {
						planet_prop = "0" + planet_prop;
						if (planet_prop.charAt(4) == ':') {
							planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
						}
					}
					if (planet_prop.charAt(4) == ':') {
						planet_prop = planet_prop.substring(0, 3) + "0" + planet_prop.substring(3);
					}
					int planet_D = Integer.parseInt(planet_prop.substring(0, 2));
					int planet_M = Integer.parseInt(planet_prop.substring(3, 5));
					int planet_minutes = planet_D * 60 + planet_M;
					planets.put(i, planet_minutes);
					
					// planets western logic - sign@1, total-minutes@2
					int planet_minutes_western = planet_minutes - 355;
					int planet_sign = Iterables.get(planets.get(i), 1);
					if (planet_minutes_western >= 0) {
						if (planet_sign == 12) {
							planet_sign = 0;
						}
						planets_western.put(i, planet_sign + 1);
						planets_western.put(i, planet_minutes_western);
					} else {
						planets_western.put(i, planet_sign);
						planets_western.put(i, planet_minutes_western + 1800);
					}
					
				}

				// getting planet house_no @ index 3
				if (j == 3) {
					int house_no = Integer.parseInt(planet_prop);
					planets.put(i, house_no);
				}

				// getting planet star lord @ index 4 & planet sub lord @ index 5
				if (j == 6 || j == 7) {
					planets.put(i, planets_id.get(planet_prop));
				}
			} // end of inner loop
		} // end of outer loop
		
		bar.setValue(10);
		
		// Calculation of Upaketu - 13
		planets.put(13, 0);
		int uk_sign_no = Iterables.get(planets.get(1), 1) - 1;
		int uk_house_no = Iterables.get(planets.get(1), 3) - 1;
		planets.put(13, uk_sign_no);
		planets.put(13, Iterables.get(planets.get(1), 2));
		planets.put(13, uk_house_no);
		planets.put(13, 0);
		
		// Calculation of Upaketu (Western)
		planets_western.put(13, 0);
		int UK_minutes_western = Iterables.get(planets.get(13), 2) - 355;
		if (UK_minutes_western >= 0) {
			if (uk_sign_no == 12) {
				uk_sign_no = 0;
			}
			planets_western.put(13, uk_sign_no + 1);
			planets_western.put(13, UK_minutes_western);
		} else {
			planets_western.put(13, uk_sign_no);
			planets_western.put(13, UK_minutes_western + 1800);
		}
		
//------------------------------------------------------------------------------------------------------------------

		// getting planet self-2 / tenanted-0 / untenanted-3 @ index 6
		for (int i = 1; i <= 9; i++) {
			boolean ut = true;
			for (int j = 1; j <= 9; j++) {
				int planet_star = Iterables.get(planets.get(j), 4);
				if (planet_star == i && j == i) {
					planets.put(i, 2);
					ut = false;
					break;
				} else if (planet_star == i) {
					planets.put(i, 0);
					ut = false;
					break;
				}
			}
			if (ut) {
				planets.put(i, 3);
			}
		}

//------------------------------------------------------------------------------------------------------------------

		Multimap<Integer, Integer> cusps = ArrayListMultimap.create();
		Multimap<Integer, Integer> cusps_western = ArrayListMultimap.create();

		// for 12 signs
		for (int i = 1; i <= 12; i++) {

			// for sign attributes
			for (int j = 1; j <= 6; j++) {

				// ignoring getting cusp nakshatra name, cusp sign lord & cusp star lord
				if (j == 3 || j == 4 || j == 5) {
					continue;
				}

				String cusp_prop = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();

				// getting cusp sign @ index 0
				if (j == 1) {
					cusps.put(i, signs_id.get(cusp_prop));
				}

				// getting cusp total minutes @ index 1
				if (j == 2) {
					if (cusp_prop.charAt(1) == ':') {
						cusp_prop = "0" + cusp_prop;
						if (cusp_prop.charAt(4) == ':') {
							cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
						}
					}
					if (cusp_prop.charAt(4) == ':') {
						cusp_prop = cusp_prop.substring(0, 3) + "0" + cusp_prop.substring(3);
					}
					int cusp_D = Integer.parseInt(cusp_prop.substring(0, 2));
					int cusp_M = Integer.parseInt(cusp_prop.substring(3, 5));
					int cusp_minutes = cusp_D * 60 + cusp_M;
					cusps.put(i, cusp_minutes);
					
					// cusps western logic - sign@0, total-minutes@1
					int cusp_minutes_western = cusp_minutes - 355;
					int cusp_sign = Iterables.get(cusps.get(i), 0);
					if (cusp_minutes_western >= 0) {
						if (cusp_sign == 12) {
							cusp_sign = 0;
						}
						cusps_western.put(i, cusp_sign + 1);
						cusps_western.put(i, cusp_minutes_western);
					} else {
						cusps_western.put(i, cusp_sign);
						cusps_western.put(i, cusp_minutes_western + 1800);
					}
				}

				// getting cusp sub lord @ index 3
				if (j == 6) {
					cusps.put(i, planets_id.get(cusp_prop));
				}
			} // end of inner loop
		} // end of outer loop

		// placing ASC as planet with key=0 in planets multimap
		planets.put(0, 0);
		planets.put(0, Iterables.get(cusps.get(1), 0));
		planets.put(0, Iterables.get(cusps.get(1), 1));
		planets.put(0, 0);
		planets.put(0, 0);

		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		Multimap<String, Integer> D1_Lords_Western = ArrayListMultimap.create();

		// Logic to form D1 Whole Sign
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps.get(1), 0) + counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign.put(i, sign);
			D1_Lords.put(lords.get(sign), i);
			counter++;
		}
		
		// Calculation of POF
		int asc_sign = Iterables.get(planets.get(0), 1);
		int asc_minutes = Iterables.get(planets.get(0), 2);
		asc_minutes = asc_minutes + (asc_sign - 1) * 1800;

		int moon_sign = Iterables.get(planets.get(2), 1);
		int moon_minutes = Iterables.get(planets.get(2), 2);
		moon_minutes = moon_minutes + (moon_sign - 1) * 1800;

		int sun_sign = Iterables.get(planets.get(1), 1);
		int sun_minutes = Iterables.get(planets.get(1), 2);
		sun_minutes = sun_minutes + (sun_sign - 1) * 1800;

		int pof_minutes = asc_minutes + moon_minutes - sun_minutes;
		if (pof_minutes < 0) {
			pof_minutes = pof_minutes + 21600;
		}
		int pof_sign = pof_minutes / 1800 + 1;
		if (pof_sign > 12) {
			pof_sign = pof_sign % 12;
		}
		pof_minutes = pof_minutes % 1800;

		planets.put(14, 0);
		planets.put(14, pof_sign);
		planets.put(14, pof_minutes);
		planets.put(14, whole_sign.inverse().get(pof_sign));
		planets.put(14, 0);
		
		// Calculation of POF (Western)
		planets_western.put(14, 0);
		int POF_minutes_western = pof_minutes - 355;
		int POF_sign = Iterables.get(planets.get(14), 1);
		if (POF_minutes_western >= 0) {
			if (POF_sign == 12) {
				POF_sign = 0;
			}
			planets_western.put(14, POF_sign + 1);
			planets_western.put(14, POF_minutes_western);
		} else {
			planets_western.put(14, POF_sign);
			planets_western.put(14, POF_minutes_western + 1800);
		}

		// 0 -> navamsa_degree , 1 -> navamsa_sign
		Multimap<Integer, Integer> navamsa = ArrayListMultimap.create();

		// Calculation of Navamsa
		for (int i = 0; i <= 14; i++) {

			int planet_sign_no = Iterables.get(planets.get(i), 1);
			int nplanet_sign_no;

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int n = (int) Math.ceil(planet_minutes / 200.0) - 1;

			// Movable Signs
			if (planet_sign_no == 1 || planet_sign_no == 4 || planet_sign_no == 7 || planet_sign_no == 10) {
				nplanet_sign_no = planet_sign_no + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} // Fixed Signs
			else if (planet_sign_no == 2 || planet_sign_no == 5 || planet_sign_no == 8 || planet_sign_no == 11) {
				nplanet_sign_no = planet_sign_no + 8 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			} else { // Dual Signs
				nplanet_sign_no = planet_sign_no + 4 + n;
				if (nplanet_sign_no > 12) {
					nplanet_sign_no = nplanet_sign_no % 12;
				}
			}

			int navamsa_minutes = (planet_minutes % 200) * 9;

			navamsa.put(i, navamsa_minutes); if (nplanet_sign_no == 0) { nplanet_sign_no = 12; }
			navamsa.put(i, nplanet_sign_no);

		}

		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();

		// Calculation of D9 Whole Sign
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(navamsa.get(0), 1) + n_counter;
			if (sign >= 13) {
				sign = sign % 12;
			}
			if (sign == 0) {
				sign = 12;
			}
			navamsa_whole_sign.put(i, sign);
			D9_Lords.put(lords.get(sign), i);
			n_counter++;
		}
		
//----------------------------------------------------------------------------------------------------------------------
		System.out.println("D1 Lagna : " + Iterables.get(planets.get(0), 2) / 60 + "°" + Iterables.get(planets.get(0), 2) % 60 + "' " + signs_id.inverse().get(Iterables.get(planets.get(0), 1)));
		System.out.println("\nD9 Lagna : " + Iterables.get(navamsa.get(0), 0) / 60 + "°" + Iterables.get(navamsa.get(0), 0) % 60 + "' " + signs_id.inverse().get(navamsa_whole_sign.get(1))+"\n\n");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		for (int i = 1; i <= 14; i++) {

			int planet_house_no = Iterables.get(planets.get(i), 3);
			int planet_sign = Iterables.get(planets.get(i), 1);
			int planet_retro = Iterables.get(planets.get(i), 0);

			int cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);

			int planet_minutes = Iterables.get(planets.get(i), 2);
			int cusp_minutes = Iterables.get(cusps.get(planet_house_no), 1);

			int orb = cusp_minutes - planet_minutes;

			if (cusp_sign == planet_sign) {
				if ((Math.abs(orb) <= 150) && (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
						|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 180) && (planet_retro == 1)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (3° orb for retro planets)");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else if ((Math.abs(orb) <= 150)
						&& (planet_house_no == 2 || planet_house_no == 8 || planet_house_no == 3 || planet_house_no == 9
								|| planet_house_no == 5 || planet_house_no == 11)) {
					System.out.println("\n**** Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "' ****\n");
				} else {
					System.out.println("Lord of " + D1_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(planet_sign) + ") is on " + planet_house_no
							+ " cusp but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
				}
			}
			
			for (int j = 1; j <= 12; j++) {

				int cuspal_sign = Iterables.get(cusps.get(j), 0);
				int cuspal_minutes = Iterables.get(cusps.get(j), 1);

				int orb2 = cuspal_minutes - planet_minutes;

				if ((cuspal_sign == planet_sign && j != planet_house_no && Math.abs(orb2) <= 150)
						&& (planet_house_no == 1 || planet_house_no == 7 || planet_house_no == 10
								|| planet_house_no == 4 || planet_house_no == 6 || planet_house_no == 12)) {
					
					System.out.println("\n[STOLEN CUSP] Lord of " + D1_Lords.get(planets_id.inverse().get(i))
							+ " house " + planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0))
							+ " (" + signs_id.inverse().get(planet_sign) + ") is on " + j + " cusp within orb of "
							+ (orb2 / 60) + "°" + Math.abs(orb2 % 60) + "' but moved to " + planet_house_no
							+ " house\n");
				}
			}
		}
		
		bar.setValue(20);
		Thread.sleep(1000);

//---------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 2)					D9 Cuspal Strength & D9 Combo : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int navamsa_asc_sign = navamsa_whole_sign.get(1);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);

		int navamsa_asc_minutes = Iterables.get(navamsa.get(0), 0);

		String d9_first = "";
		String d9_seventh = "";

		for (int i = 1; i <= 14; i++) {

			int nplanet_minutes = Iterables.get(navamsa.get(i), 0);

			int orb = navamsa_asc_minutes - nplanet_minutes;

			int navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);

			if (navamsa_asc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Ascendant (1st) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_first = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_first;
				}
			}
			if (navamsa_dsc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) within orb of " + (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")"
							+ " is in D9 Descendant (7th) but within orb of " + (orb / 60) + "°" + Math.abs(orb % 60)
							+ "' (out of 2°30' orb)");
					d9_seventh = planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " + "
							+ d9_seventh;
				}
			}
			if (navamsa_mc_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 10th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}
			if (navamsa_ic_sign == navamsa_planet_sign) {
				if (Math.abs(orb) <= 150) {
					System.out.println(
							"\n******************************************************************************************************************************************");
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "'");
					System.out.println(
							"******************************************************************************************************************************************\n");
				} else {
					System.out.println("Lord of " + D9_Lords.get(planets_id.inverse().get(i)) + " house "
							+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets.get(i), 0)) + " ("
							+ signs_id.inverse().get(navamsa_planet_sign) + ")" + " is in D9 4th but within orb of "
							+ (orb / 60) + "°" + Math.abs(orb % 60) + "' (out of 2°30' orb)");
				}
			}

		}

		System.out.println("\n\nD9 Combo : ");
		System.out.println("\nD9 ASC 1st : " + StringUtils.chop(StringUtils.chop(d9_first)));
		System.out.println("D9 DSC 7th : " + StringUtils.chop(StringUtils.chop(d9_seventh)));
		
		bar.setValue(30);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		String asc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))
				.getText();
		String dsc_csl = driver.findElement(By.xpath(
				"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))
				.getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		String planet_status;

		int ASC = 0;
		int DSC = 0;

		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for (int i = 1; i <= 12; i++) {
			for (int j = 1; j <= 4; j++) {
				String s = driver.findElement(By.xpath(
						"/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["
								+ i + "]/td[" + j + "]"))
						.getText();
				if ((s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto"))) {
					house_view.put(i, "");
				} else {
					house_view.put(i, s);
				}
			}
		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl)) {
					ASC_SUB = ASC_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + " = " + ASC_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl)) {
					DSC_SUB = DSC_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}
		System.out.println("7th CSL : " + dsc_csl + " = " + DSC_SUB + "\n");

		if (ASC_SUB == DSC_SUB) {
			System.out.println("Sublords are neutral");
			planet_status = "(1) Planet Level : Neutral";
		} else if (asc_csl.equals(dsc_csl)) {
			if (ASC_SUB > 0) {
				System.out.println("Sublords are in favor of ASC by " + ASC_SUB);
				planet_status = "(1) Planet Level : ASC by " + ASC_SUB;
				ASC = ASC + ASC_SUB;
			} else {
				System.out.println("Sublords are in favor of DSC by " + DSC_SUB);
				planet_status = "(1) Planet Level : DSC by " + DSC_SUB;
				DSC = DSC + DSC_SUB;
			}
		} else if (ASC_SUB > DSC_SUB) {
			System.out.println("Sublords are in favor of ASC by " + (ASC_SUB - DSC_SUB));
			planet_status = "(1) Planet Level : ASC by " + (ASC_SUB - DSC_SUB);
			ASC = ASC + (ASC_SUB - DSC_SUB);
		} else {
			System.out.println("Sublords are in favor of DSC by " + (DSC_SUB - ASC_SUB));
			planet_status = "(1) Planet Level : DSC by " + (DSC_SUB - ASC_SUB);
			DSC = DSC + (DSC_SUB - ASC_SUB);
		}

//------------------------------------------------------------------------------------------------------------------
//									  ADVANCED
//------------------------------------------------------------------------------------------------------------------

		System.out.println("\n\nADVANCED : Using Star and Sub of 1st & 7th CSL");
		System.out.println("==============================================\n");

		int asc_csl_star = Iterables.get(planets.get(planets_id.get(asc_csl)), 4);
		int asc_csl_sub = Iterables.get(planets.get(planets_id.get(asc_csl)), 5);

		int dsc_csl_star = Iterables.get(planets.get(planets_id.get(dsc_csl)), 4);
		int dsc_csl_sub = Iterables.get(planets.get(planets_id.get(dsc_csl)), 5);

		String asc_csl_stars = planets_id.inverse().get(asc_csl_star);
		String asc_csl_subs = planets_id.inverse().get(asc_csl_sub);

		String dsc_csl_stars = planets_id.inverse().get(dsc_csl_star);
		String dsc_csl_subs = planets_id.inverse().get(dsc_csl_sub);

		int ASC_SUB_STAR = 0;
		int DSC_SUB_STAR = 0;
		int ASC_SUB_SUB = 0;
		int DSC_SUB_SUB = 0;
		String star_status;
		String sub_status;

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Star Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)))) {
				ASC_SUB_STAR = ASC_SUB_STAR - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_stars)) {
					ASC_SUB_STAR = ASC_SUB_STAR - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_stars))) {
						ASC_SUB_STAR = ASC_SUB_STAR - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars))))) {
				DSC_SUB_STAR = DSC_SUB_STAR + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_stars)) {
					DSC_SUB_STAR = DSC_SUB_STAR + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_stars))) {
						DSC_SUB_STAR = DSC_SUB_STAR + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_STAR == DSC_SUB_STAR) {
			star_status = "(2) Star Level : Neutral";
		} else if (asc_csl_stars.equals(dsc_csl_stars)) {
			if (ASC_SUB_STAR > 0) {
				star_status = "(2) Star Level : ASC by " + ASC_SUB_STAR;
				ASC = ASC + (ASC_SUB_STAR * 2);
			} else {
				star_status = "(2) Star Level : DSC by " + DSC_SUB_STAR;
				DSC = DSC + (DSC_SUB_STAR * 2);
			}
		} else if (ASC_SUB_STAR > DSC_SUB_STAR) {
			star_status = "(2) Star Level : ASC by " + (ASC_SUB_STAR - DSC_SUB_STAR);
			ASC = ASC + (ASC_SUB_STAR - DSC_SUB_STAR) * 2;
		} else {
			star_status = "(2) Star Level : DSC by " + (DSC_SUB_STAR - ASC_SUB_STAR);
			DSC = DSC + (DSC_SUB_STAR - ASC_SUB_STAR) * 2;
		}

//-------------------------------------------------------------------------------------------------------------------
// Calculations of 1st & 7th CSL Sub Lord

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB + 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals(""))
							&& (Iterables.get(house_view.get(i), 2).equals(""))
							&& (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)))) {
				ASC_SUB_SUB = ASC_SUB_SUB - 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB + 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0).equals(""))
							&& (Iterables.get(house_view.get(i), 1).equals("")))) {
				if (Iterables.get(house_view.get(i), 2).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(asc_csl_subs)) {
					ASC_SUB_SUB = ASC_SUB_SUB - 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB + cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(asc_csl_subs))) {
						ASC_SUB_SUB = ASC_SUB_SUB - cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		System.out.println("1st CSL : " + asc_csl + retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl)), 6)) + " = " + ASC_SUB);
		System.out.println(asc_csl + " Star Lord : " + asc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_stars)), 0)) + " = " + ASC_SUB_STAR);
		System.out.println(asc_csl + " Sub Lord : " + asc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(asc_csl_subs)), 0)) + " = " + ASC_SUB_SUB);

		for (int i = 1; i <= 12; i++) {

			if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB - 4;
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "")
							&& (Iterables.get(house_view.get(i), 2) == ""
									&& (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs))))) {
				DSC_SUB_SUB = DSC_SUB_SUB + 4;
			} else if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB - 2;
				}
			} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
					&& ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if (Iterables.get(house_view.get(i), 2).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 4;
				} else if (Iterables.get(house_view.get(i), 3).contains(dsc_csl_subs)) {
					DSC_SUB_SUB = DSC_SUB_SUB + 2;
				}
			} else {
				int cnt = 4;
				for (int j = 0; j <= 3; j++) {
					String s = Iterables.get(house_view.get(i), j);

					if ((i == 1 || i == 2 || i == 3 || i == 6 || i == 10 || i == 11) && (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB - cnt;
					} else if ((i == 7 || i == 8 || i == 9 || i == 4 || i == 5 || i == 12)
							&& (s.contains(dsc_csl_subs))) {
						DSC_SUB_SUB = DSC_SUB_SUB + cnt;
					}
					cnt = cnt - 1;
				}
			}

		}

		if (ASC_SUB_SUB == DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : Neutral";
		} else if (asc_csl_subs.equals(dsc_csl_subs)) {
			if (ASC_SUB_SUB > 0) {
				sub_status = "(3) Sub Level : ASC by " + ASC_SUB_SUB;
				ASC = ASC + (ASC_SUB_SUB * 3);
			} else {
				sub_status = "(3) Sub Level : DSC by " + DSC_SUB_SUB;
				DSC = DSC + (DSC_SUB_SUB * 3);
			}
		} else if (ASC_SUB_SUB > DSC_SUB_SUB) {
			sub_status = "(3) Sub Level : ASC by " + (ASC_SUB_SUB - DSC_SUB_SUB);
			ASC = ASC + (ASC_SUB_SUB - DSC_SUB_SUB) * 3;
		} else {
			sub_status = "(3) Sub Level : DSC by " + (DSC_SUB_SUB - ASC_SUB_SUB);
			DSC = DSC + (DSC_SUB_SUB - ASC_SUB_SUB) * 3;
		}

		System.out.println("\n7th CSL : " + dsc_csl + retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 0))
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl)), 6)) + " = " + DSC_SUB);
		System.out.println(dsc_csl + " Star Lord : " + dsc_csl_stars
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_stars)), 0)) + " = " + DSC_SUB_STAR);
		System.out.println(dsc_csl + " Sub Lord : " + dsc_csl_subs
				+ retro.get(Iterables.get(planets.get(planets_id.get(dsc_csl_subs)), 0)) + " = " + DSC_SUB_SUB + "\n");

		System.out.println(planet_status);
		System.out.println(star_status);
		System.out.println(sub_status);

		System.out.println("\nASC : " + ASC + "  ,  DSC : " + DSC + "\n");
		if (ASC == DSC) {
			System.out.println("************ BALANCED ************");
		} else if (ASC > DSC) {
			System.out.println("************ ASC by " + (ASC - DSC) + " ************");
		} else {
			System.out.println("************ DSC by " + (DSC - ASC) + " ************");
		}

		bar.setValue(40);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 4)					Victory House Technique : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		float ASC_VHQ = 0;
		float DSC_VHQ = 0;

		int Mars = Iterables.get(planets.get(3), 3);
		int Mars_sign = Iterables.get(planets.get(3), 1);
		int Mars_star = Iterables.get(planets.get(3), 4);
		int MarsR = Iterables.get(planets.get(3), 0);
		if (Mars == 1 || Mars == 3 || Mars == 6 || Mars == 10 || Mars == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Mars == 7 || Mars == 9 || Mars == 12 || Mars == 4 || Mars == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Mars_sign == 1 || Mars_sign == 8 || Mars_sign == 10) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mars_star == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MarsR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Saturn = Iterables.get(planets.get(7), 3);
		int Saturn_sign = Iterables.get(planets.get(7), 1);
		int Saturn_star = Iterables.get(planets.get(7), 4);
		int SaturnR = Iterables.get(planets.get(7), 0);
		if (Saturn == 1 || Saturn == 3 || Saturn == 6 || Saturn == 10 || Saturn == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Saturn == 7 || Saturn == 9 || Saturn == 12 || Saturn == 4 || Saturn == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Saturn_sign == 10 || Saturn_sign == 11 || Saturn_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Saturn_star == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (SaturnR == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int Sun = Iterables.get(planets.get(1), 3);
		int Sun_sign = Iterables.get(planets.get(1), 1);
		int Sun_star = Iterables.get(planets.get(1), 4);
		if (Sun == 1 || Sun == 3 || Sun == 6 || Sun == 10 || Sun == 11) {
			ASC_VHQ = (float) (ASC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if (Sun == 7 || Sun == 9 || Sun == 12 || Sun == 4 || Sun == 5) {
			DSC_VHQ = (float) (DSC_VHQ + 2.5);
			if (Sun_sign == 5 || Sun_sign == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Sun_star == 1) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}
		
		int JupiterR = Iterables.get(planets.get(5), 0);
		int Jupiter = Iterables.get(planets.get(5), 3);
		int Jupiter_sign = Iterables.get(planets.get(5), 1);
		int Jupiter_star = Iterables.get(planets.get(5), 4);
		if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 1 || Jupiter == 3 || Jupiter == 6 || Jupiter == 10 || Jupiter == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((JupiterR == 1 || Jupiter_sign == 4)
				&& (Jupiter == 7 || Jupiter == 9 || Jupiter == 12 || Jupiter == 4 || Jupiter == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Jupiter_sign == 9 || Jupiter_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Jupiter_star == 5) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (JupiterR == 1 && Jupiter_sign == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int VenusR = Iterables.get(planets.get(6), 0);
		int Venus = Iterables.get(planets.get(6), 3);
		int Venus_sign = Iterables.get(planets.get(6), 1);
		int Venus_star = Iterables.get(planets.get(6), 4);
		if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 1 || Venus == 3 || Venus == 6 || Venus == 10 || Venus == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((VenusR == 1 || Venus_sign == 12)
				&& (Venus == 7 || Venus == 9 || Venus == 12 || Venus == 4 || Venus == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Venus_sign == 2 || Venus_sign == 7) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Venus_star == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (VenusR == 1 && Venus_sign == 12) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		int MercuryR = Iterables.get(planets.get(4), 0);
		int Mercury = Iterables.get(planets.get(4), 3);
		int Mercury_sign = Iterables.get(planets.get(4), 1);
		int Mercury_star = Iterables.get(planets.get(4), 4);
		if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 1 || Mercury == 3 || Mercury == 6 || Mercury == 10 || Mercury == 11)) {
			ASC_VHQ = ASC_VHQ + 2;
			if (Mercury_sign == 3) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				ASC_VHQ = (float) (ASC_VHQ + 0.5);
			}
		} else if ((MercuryR == 1 || Mercury_sign == 6)
				&& (Mercury == 7 || Mercury == 9 || Mercury == 12 || Mercury == 4 || Mercury == 5)) {
			DSC_VHQ = DSC_VHQ + 2;
			if (Mercury_sign == 3) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (Mercury_star == 4) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
			if (MercuryR == 1 && Mercury_sign == 6) {
				DSC_VHQ = (float) (DSC_VHQ + 0.5);
			}
		}

		System.out.println("Ascendant (ASC) : " + ASC_VHQ);
		System.out.println("Descendant (DSC) : " + DSC_VHQ + "\n");

		if (ASC_VHQ == DSC_VHQ) {
			System.out.println("Malefics are balanced");
		} else if (ASC_VHQ > DSC_VHQ) {
			System.out.println("Malefics are in favor of ASC by " + (ASC_VHQ - DSC_VHQ));
		} else {
			System.out.println("Malefics are in favor of DSC by " + (DSC_VHQ - ASC_VHQ));
		}

		bar.setValue(50);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 5)					SKY / PKY : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		Venus = Iterables.get(planets.get(6), 3);
		Jupiter = Iterables.get(planets.get(5), 3);
		Mercury = Iterables.get(planets.get(4), 3);
		int Ketu = Iterables.get(planets.get(9), 3);
		int Rahu = Iterables.get(planets.get(8), 3);

		if ((Venus == 2 || Jupiter == 2 || Mercury == 2) && (Venus == 12 || Jupiter == 12 || Mercury == 12)) {
			System.out.println("Shubha Kartari Yoga forming on Ascendant (1st House)");
		}

		if ((Venus == 6 || Jupiter == 6 || Mercury == 6) && (Venus == 8 || Jupiter == 8 || Mercury == 8)) {
			System.out.println("Shubha Kartari Yoga forming on Descendant (7th House)");
		}

		if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Saturn == 12 || Mars == 12 || Sun == 12)) {
			System.out.println("Paap Kartari Yoga forming on Ascendant (1st House)");
		} else if ((Saturn == 2 || Mars == 2 || Sun == 2) && (Ketu == 12 || Rahu == 12)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		} else if ((Saturn == 12 || Mars == 12 || Sun == 12) && (Ketu == 2 || Rahu == 2)) {
			System.out.println("Half PKY forming on Ascendant (1st House)");
		}

		if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Saturn == 8 || Mars == 8 || Sun == 8)) {
			System.out.println("Paap Kartari Yoga forming on Descendant (7th House)");
		} else if ((Saturn == 6 || Mars == 6 || Sun == 6) && (Ketu == 8 || Rahu == 8)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		} else if ((Saturn == 8 || Mars == 8 || Sun == 8) && (Ketu == 6 || Rahu == 6)) {
			System.out.println("Half PKY forming on Descendant (7th House)");
		}

		if ((Venus == 9 || Jupiter == 9 || Mercury == 9) && (Venus == 11 || Jupiter == 11 || Mercury == 11)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on MC (10th House)");
		}

		if ((Venus == 3 || Jupiter == 3 || Mercury == 3) && (Venus == 5 || Jupiter == 5 || Mercury == 5)) {
			System.out.println("[EXPERIMENTAL] : Shubha Kartari Yoga forming on IC (4th House)");
		}

		if ((Saturn == 9 || Mars == 9 || Sun == 9) && (Saturn == 11 || Mars == 11 || Sun == 11)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on MC (10th House)");
		}

		if ((Saturn == 3 || Mars == 3 || Sun == 3) && (Saturn == 5 || Mars == 5 || Sun == 5)) {
			System.out.println("[EXPERIMENTAL] : Paap Kartari Yoga forming on IC (4th House)");
		}

		bar.setValue(60);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 6)					Nakshatra Tara (Fixed Star) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		for (int i = 1; i <= 12; i++) {
			int cusp_sign = Iterables.get(cusps.get(i), 0);
			int cusp_minutes = Iterables.get(cusps.get(i), 1);

			int regulus_orb = 360 - cusp_minutes;
			int pollux_orb = 1770 - cusp_minutes;
			int zuben_orb = 1260 - cusp_minutes;
			int bettelguese_orb = 300 - cusp_minutes;
			int spica_orb = 1795 - cusp_minutes;
			int denebola_orb = 1665 - cusp_minutes;
			int algol_orb = 120 - cusp_minutes;
			int antares_orb = 960 - cusp_minutes;
			int purva_orb = 1050 - cusp_minutes;
			int krittika_orb = 360 - cusp_minutes;

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(regulus_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Regulus (6° Leo) within orb of " + (regulus_orb / 60) + "°"
						+ Math.abs(regulus_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(pollux_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Pollux (29° 30' Gemini) within orb of " + (pollux_orb / 60)
						+ "°" + Math.abs(pollux_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 7 && Math.abs(zuben_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Zuben Elgenubi (21° Libra) within orb of " + (zuben_orb / 60)
						+ "°" + Math.abs(zuben_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 3 && Math.abs(bettelguese_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Bettelguese (5° Gemini) within orb of " + (bettelguese_orb / 60)
						+ "°" + Math.abs(bettelguese_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 6 && Math.abs(spica_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Spica (29° 55' Virgo) within orb of " + (spica_orb / 60) + "°"
						+ Math.abs(spica_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(denebola_orb) <= 60)) {
				System.out.println(
						"\n******************************************************************************************************************************************");
				System.out.println(i + " cusp is on The Denebola (27° 45' Leo) within orb of " + (denebola_orb / 60)
						+ "°" + Math.abs(denebola_orb % 60) + "'");
				System.out.println(
						"******************************************************************************************************************************************\n");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(algol_orb) <= 60)) {
				System.out.println(i + " cusp is on The Algol (2° Taurus) within orb of " + (algol_orb / 60) + "°"
						+ Math.abs(algol_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 8 && Math.abs(antares_orb) <= 60)) {
				System.out.println(i + " cusp is on The Antares (16° Scorpio) within orb of " + (antares_orb / 60) + "°"
						+ Math.abs(antares_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 5 && Math.abs(purva_orb) <= 60)) {
				System.out.println(i + " cusp is on The Purva Phalguni (17° 30' Leo) within orb of " + (purva_orb / 60)
						+ "°" + Math.abs(purva_orb % 60) + "'");
			}

			if ((i == 1 || i == 7 || i == 10 || i == 4) && (cusp_sign == 2 && Math.abs(krittika_orb) <= 60)) {
				System.out.println(i + " cusp is on The Krittika (6° Taurus) within orb of " + (krittika_orb / 60) + "°"
						+ Math.abs(krittika_orb % 60) + "'");
			}

		}

		int l1 = planets_id.get(lords.get(whole_sign.get(1)));
		int l1_minutes = Iterables.get(planets.get(l1), 2);
		int l1_sign = Iterables.get(planets.get(l1), 1);

		int l7 = planets_id.get(lords.get(whole_sign.get(7)));
		int l7_minutes = Iterables.get(planets.get(l7), 2);
		int l7_sign = Iterables.get(planets.get(l7), 1);

		int l10 = planets_id.get(lords.get(whole_sign.get(10)));
		int l10_minutes = Iterables.get(planets.get(l10), 2);
		int l10_sign = Iterables.get(planets.get(l10), 1);

		int l4 = planets_id.get(lords.get(whole_sign.get(4)));
		int l4_minutes = Iterables.get(planets.get(l4), 2);
		int l4_sign = Iterables.get(planets.get(l4), 1);

		int l1_regulus = 360 - l1_minutes;
		int l1_pollux = 1770 - l1_minutes;
		int l1_zuben = 1260 - l1_minutes;
		int l1_bettelguese = 300 - l1_minutes;
		int l1_spica = 1795 - l1_minutes;

		int l7_regulus = 360 - l7_minutes;
		int l7_pollux = 1770 - l7_minutes;
		int l7_zuben = 1260 - l7_minutes;
		int l7_bettelguese = 300 - l7_minutes;
		int l7_spica = 1795 - l7_minutes;

		int l10_regulus = 360 - l10_minutes;
		int l10_pollux = 1770 - l10_minutes;
		int l10_zuben = 1260 - l10_minutes;
		int l10_bettelguese = 300 - l10_minutes;
		int l10_spica = 1795 - l10_minutes;

		int l4_regulus = 360 - l4_minutes;
		int l4_pollux = 1770 - l4_minutes;
		int l4_zuben = 1260 - l4_minutes;
		int l4_bettelguese = 300 - l4_minutes;
		int l4_spica = 1795 - l4_minutes;

		System.out.println("\n\nLord's Conjuction with Nakshatra Taras : ");
		System.out.println("========================================\n");
		if (l1_sign == 5 && Math.abs(l1_regulus) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct regulus within orb of "
					+ (l1_regulus / 60) + "°" + Math.abs(l1_regulus % 60) + "'");
		}
		if (l7_sign == 5 && Math.abs(l7_regulus) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct regulus within orb of "
					+ (l7_regulus / 60) + "°" + Math.abs(l7_regulus % 60) + "'");
		}
		if (l10_sign == 5 && Math.abs(l10_regulus) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct regulus within orb of "
					+ (l10_regulus / 60) + "°" + Math.abs(l10_regulus % 60) + "'");
		}
		if (l4_sign == 5 && Math.abs(l4_regulus) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct regulus within orb of "
					+ (l4_regulus / 60) + "°" + Math.abs(l4_regulus % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_pollux) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct pollux within orb of "
					+ (l1_pollux / 60) + "°" + Math.abs(l1_pollux % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_pollux) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct pollux within orb of "
					+ (l7_pollux / 60) + "°" + Math.abs(l7_pollux % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_pollux) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct pollux within orb of "
					+ (l10_pollux / 60) + "°" + Math.abs(l10_pollux % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_pollux) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct pollux within orb of "
					+ (l4_pollux / 60) + "°" + Math.abs(l4_pollux % 60) + "'");
		}

		if (l1_sign == 7 && Math.abs(l1_zuben) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct zuben elgenubi within orb of "
					+ (l1_zuben / 60) + "°" + Math.abs(l1_zuben % 60) + "'");
		}
		if (l7_sign == 7 && Math.abs(l7_zuben) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct zuben elgenubi within orb of "
					+ (l7_zuben / 60) + "°" + Math.abs(l7_zuben % 60) + "'");
		}
		if (l10_sign == 7 && Math.abs(l10_zuben) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct zuben elgenubi within orb of "
					+ (l10_zuben / 60) + "°" + Math.abs(l10_zuben % 60) + "'");
		}
		if (l4_sign == 7 && Math.abs(l4_zuben) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct zuben elgenubi within orb of "
					+ (l4_zuben / 60) + "°" + Math.abs(l4_zuben % 60) + "'");
		}

		if (l1_sign == 3 && Math.abs(l1_bettelguese) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct bettelguese within orb of "
					+ (l1_bettelguese / 60) + "°" + Math.abs(l1_bettelguese % 60) + "'");
		}
		if (l7_sign == 3 && Math.abs(l7_bettelguese) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct bettelguese within orb of "
					+ (l7_bettelguese / 60) + "°" + Math.abs(l7_bettelguese % 60) + "'");
		}
		if (l10_sign == 3 && Math.abs(l10_bettelguese) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct bettelguese within orb of "
					+ (l10_bettelguese / 60) + "°" + Math.abs(l10_bettelguese % 60) + "'");
		}
		if (l4_sign == 3 && Math.abs(l4_bettelguese) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct bettelguese within orb of "
					+ (l4_bettelguese / 60) + "°" + Math.abs(l4_bettelguese % 60) + "'");
		}

		if (l1_sign == 6 && Math.abs(l1_spica) <= 60) {
			System.out.println("L1 " + planets_id.inverse().get(l1) + " conjuct spica within orb of " + (l1_spica / 60)
					+ "°" + Math.abs(l1_spica % 60) + "'");
		}
		if (l7_sign == 6 && Math.abs(l7_spica) <= 60) {
			System.out.println("L7 " + planets_id.inverse().get(l7) + " conjuct spica within orb of " + (l7_spica / 60)
					+ "°" + Math.abs(l7_spica % 60) + "'");
		}
		if (l10_sign == 6 && Math.abs(l10_spica) <= 60) {
			System.out.println("L10 " + planets_id.inverse().get(l10) + " conjuct spica within orb of "
					+ (l10_spica / 60) + "°" + Math.abs(l10_spica % 60) + "'");
		}
		if (l4_sign == 6 && Math.abs(l4_spica) <= 60) {
			System.out.println("L4 " + planets_id.inverse().get(l4) + " conjuct spica within orb of " + (l4_spica / 60)
					+ "°" + Math.abs(l4_spica % 60) + "'");
		}

		bar.setValue(70);
		Thread.sleep(1000);

//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 7)					Part of Fortune & Moon Aspects : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		System.out.println("Part of Fortune (POF) : " + pof_minutes / 60 + "°" + pof_minutes % 60 + "' "
				+ signs_id.inverse().get(pof_sign) + "\n");

		int MOON_minutes = Iterables.get(planets.get(2), 2);
		int MOON_houseno = Iterables.get(planets.get(2), 3);

		int POF_minutes = Iterables.get(planets.get(14), 2);
		int POF_houseno = Iterables.get(planets.get(14), 3);
		int POF_orb = POF_minutes - MOON_minutes;

		int L1 = planets_id.get(lords.get(whole_sign.get(1)));
		int L1_minutes = Iterables.get(planets.get(L1), 2);
		int L1_houseno = Iterables.get(planets.get(L1), 3);
		int L1_orb = L1_minutes - MOON_minutes;
		int L1_poforb = POF_minutes - L1_minutes;

		int L7 = planets_id.get(lords.get(whole_sign.get(7)));
		int L7_minutes = Iterables.get(planets.get(L7), 2);
		int L7_houseno = Iterables.get(planets.get(L7), 3);
		int L7_orb = L7_minutes - MOON_minutes;
		int L7_poforb = POF_minutes - L7_minutes;

		int L10 = planets_id.get(lords.get(whole_sign.get(10)));
		int L10_minutes = Iterables.get(planets.get(L10), 2);
		int L10_houseno = Iterables.get(planets.get(L10), 3);
		int L10_orb = L10_minutes - MOON_minutes;
		int L10_poforb = POF_minutes - L10_minutes;

		int L4 = planets_id.get(lords.get(whole_sign.get(4)));
		int L4_minutes = Iterables.get(planets.get(L4), 2);
		int L4_houseno = Iterables.get(planets.get(L4), 3);
		int L4_orb = L4_minutes - MOON_minutes;
		int L4_poforb = POF_minutes - L4_minutes;

		if (MOON_minutes < L1_minutes || MOON_minutes > L1_minutes && L1 != 2) {
			if (Math.abs(L1_orb) <= 180) {
				if (Math.abs(L1_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				} else if (Math.abs(L1_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L1 " + planets_id.inverse().get(L1)
							+ " within orb of " + (L1_orb / 60) + "°" + Math.abs(L1_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L7_minutes || MOON_minutes > L7_minutes && L7 != 2) {
			if (Math.abs(L7_orb) <= 180) {
				if (Math.abs(L7_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				} else if (Math.abs(L7_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L7 " + planets_id.inverse().get(L7)
							+ " within orb of " + (L7_orb / 60) + "°" + Math.abs(L7_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L10_minutes || MOON_minutes > L10_minutes && L10 != 2) {
			if (Math.abs(L10_orb) <= 180) {
				if (Math.abs(L10_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				} else if (Math.abs(L10_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L10 " + planets_id.inverse().get(L10)
							+ " within orb of " + (L10_orb / 60) + "°" + Math.abs(L10_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < L4_minutes || MOON_minutes > L4_minutes && L4 != 2) {
			if (Math.abs(L4_orb) <= 180) {
				if (Math.abs(L4_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				} else if (Math.abs(L4_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct L4 " + planets_id.inverse().get(L4)
							+ " within orb of " + (L4_orb / 60) + "°" + Math.abs(L4_orb % 60) + "'");
				}
			}
		}

		if (MOON_minutes < POF_minutes || MOON_minutes > POF_minutes) {
			if (Math.abs(POF_orb) <= 180) {
				if (Math.abs(POF_houseno - MOON_houseno) == 2) {
					System.out.println("Moon is applying to sextile POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 3) {
					System.out.println("Moon is applying to square POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 6) {
					System.out.println("Moon is applying to oppose POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				} else if (Math.abs(POF_houseno - MOON_houseno) == 0) {
					System.out.println("Moon is applying to conjuct POF within orb of " + (POF_orb / 60) + "°"
							+ Math.abs(POF_orb % 60) + "'");
				}
			}
		}

		if (L1_minutes < POF_minutes || L1_minutes > POF_minutes) {
			if (Math.abs(L1_poforb) <= 180) {
				if (Math.abs(POF_houseno - L1_houseno) == 6) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to oppose POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L1_houseno) == 0) {
					System.out
							.println("L1 " + planets_id.inverse().get(L1) + retro.get(Iterables.get(planets.get(L1), 0)) + " is applying to conjuct POF within orb of "
									+ (L1_poforb / 60) + "°" + Math.abs(L1_poforb % 60) + "'");
				}
			}
		}

		if (L7_minutes < POF_minutes || L7_minutes > POF_minutes) {
			if (Math.abs(L7_poforb) <= 180) {
				if (Math.abs(POF_houseno - L7_houseno) == 6) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to oppose POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L7_houseno) == 0) {
					System.out
							.println("L7 " + planets_id.inverse().get(L7) + retro.get(Iterables.get(planets.get(L7), 0)) + " is applying to conjuct POF within orb of "
									+ (L7_poforb / 60) + "°" + Math.abs(L7_poforb % 60) + "'");
				}
			}
		}

		if (L10_minutes < POF_minutes || L10_minutes > POF_minutes) {
			if (Math.abs(L10_poforb) <= 180) {
				if (Math.abs(POF_houseno - L10_houseno) == 6) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to oppose POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L10_houseno) == 0) {
					System.out.println(
							"L10 " + planets_id.inverse().get(L10) + retro.get(Iterables.get(planets.get(L10), 0)) + " is applying to conjuct POF within orb of "
									+ (L10_poforb / 60) + "°" + Math.abs(L10_poforb % 60) + "'");
				}
			}
		}

		if (L4_minutes < POF_minutes || L4_minutes > POF_minutes) {
			if (Math.abs(L4_poforb) <= 180) {
				if (Math.abs(POF_houseno - L4_houseno) == 6) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to oppose POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				} else if (Math.abs(POF_houseno - L4_houseno) == 0) {
					System.out
							.println("L4 " + planets_id.inverse().get(L4) + retro.get(Iterables.get(planets.get(L4), 0)) + " is applying to conjuct POF within orb of "
									+ (L4_poforb / 60) + "°" + Math.abs(L4_poforb % 60) + "'");
				}
			}
		}
		
		bar.setValue(80);
		Thread.sleep(1000);
		
//-------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 8)					Good and Bad Conjuctions : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int ketu_houseno = Iterables.get(planets.get(9), 3);
		int ketu_minutes = Iterables.get(planets.get(9), 2);

		int upaketu_houseno = Iterables.get(planets.get(13), 3);
		int upaketu_minutes = Iterables.get(planets.get(13), 2);

		int neptune_houseno = Iterables.get(planets.get(11), 3);
		int neptune_minutes = Iterables.get(planets.get(11), 2);

		int pluto_houseno = Iterables.get(planets.get(12), 3);
		int pluto_minutes = Iterables.get(planets.get(12), 2);

		int sunny_houseno = Iterables.get(planets.get(1), 3);
		int sunny_minutes = Iterables.get(planets.get(1), 2);

		int rahu_houseno = Iterables.get(planets.get(8), 3);
		int rahu_minutes = Iterables.get(planets.get(8), 2);

		int uranus_houseno = Iterables.get(planets.get(10), 3);
		int uranus_minutes = Iterables.get(planets.get(10), 2);

		int L1_ketorb = L1_minutes - ketu_minutes;
		int L1_ukorb = L1_minutes - upaketu_minutes;
		int L1_neporb = L1_minutes - neptune_minutes;
		int L1_pluorb = L1_minutes - pluto_minutes;
		int L1_sunorb = L1_minutes - sunny_minutes;
		int L1_rahuorb = L1_minutes - rahu_minutes;
		int L1_uraorb = L1_minutes - uranus_minutes;

		int L7_ketorb = L7_minutes - ketu_minutes;
		int L7_ukorb = L7_minutes - upaketu_minutes;
		int L7_neporb = L7_minutes - neptune_minutes;
		int L7_pluorb = L7_minutes - pluto_minutes;
		int L7_sunorb = L7_minutes - sunny_minutes;
		int L7_rahuorb = L7_minutes - rahu_minutes;
		int L7_uraorb = L7_minutes - uranus_minutes;

		int L10_ketorb = L10_minutes - ketu_minutes;
		int L10_ukorb = L10_minutes - upaketu_minutes;
		int L10_neporb = L10_minutes - neptune_minutes;
		int L10_pluorb = L10_minutes - pluto_minutes;
		int L10_sunorb = L10_minutes - sunny_minutes;
		int L10_rahuorb = L10_minutes - rahu_minutes;
		int L10_uraorb = L10_minutes - uranus_minutes;

		int L4_ketorb = L4_minutes - ketu_minutes;
		int L4_ukorb = L4_minutes - upaketu_minutes;
		int L4_neporb = L4_minutes - neptune_minutes;
		int L4_pluorb = L4_minutes - pluto_minutes;
		int L4_sunorb = L4_minutes - sunny_minutes;
		int L4_rahuorb = L4_minutes - rahu_minutes;
		int L4_uraorb = L4_minutes - uranus_minutes;

		int POF_ketorb = POF_minutes - ketu_minutes;
		int POF_ukorb = POF_minutes - upaketu_minutes;
		int POF_neporb = POF_minutes - neptune_minutes;
		int POF_pluorb = POF_minutes - pluto_minutes;
		int POF_sunorb = POF_minutes - sunny_minutes;
		int POF_rahuorb = POF_minutes - rahu_minutes;
		int POF_uraorb = POF_minutes - uranus_minutes;

		if (Math.abs(L1_ketorb) <= 120 && ketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct ketu within orb of " + (L1_ketorb / 60)
					+ "°" + Math.abs(L1_ketorb % 60) + "'");
		}
		if (Math.abs(L1_ukorb) <= 120 && upaketu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct upaketu within orb of "
					+ (L1_ukorb / 60) + "°" + Math.abs(L1_ukorb % 60) + "'");
		}
		if (Math.abs(L1_neporb) <= 120 && neptune_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct neptune within orb of "
					+ (L1_neporb / 60) + "°" + Math.abs(L1_neporb % 60) + "'");
		}
		if (Math.abs(L1_pluorb) <= 120 && pluto_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct pluto within orb of " + (L1_pluorb / 60)
					+ "°" + Math.abs(L1_pluorb % 60) + "'");
		}
		if (Math.abs(L1_sunorb) <= 120 && sunny_houseno == L1_houseno && L1 != 1) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " is combusted by sun within orb of "
					+ (L1_sunorb / 60) + "°" + Math.abs(L1_sunorb % 60) + "'");
		}
		if (Math.abs(L1_rahuorb) <= 120 && rahu_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct rahu within orb of " + (L1_rahuorb / 60)
					+ "°" + Math.abs(L1_rahuorb % 60) + "'");
		}
		if (Math.abs(L1_uraorb) <= 120 && uranus_houseno == L1_houseno) {
			System.out.println("L1 " + planets_id.inverse().get(L1) + " conjuct uranus within orb of "
					+ (L1_uraorb / 60) + "°" + Math.abs(L1_uraorb % 60) + "'");
		}

		if (Math.abs(L7_ketorb) <= 120 && ketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct ketu within orb of " + (L7_ketorb / 60)
					+ "°" + Math.abs(L7_ketorb % 60) + "'");
		}
		if (Math.abs(L7_ukorb) <= 120 && upaketu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct upaketu within orb of "
					+ (L7_ukorb / 60) + "°" + Math.abs(L7_ukorb % 60) + "'");
		}
		if (Math.abs(L7_neporb) <= 120 && neptune_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct neptune within orb of "
					+ (L7_neporb / 60) + "°" + Math.abs(L7_neporb % 60) + "'");
		}
		if (Math.abs(L7_pluorb) <= 120 && pluto_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct pluto within orb of " + (L7_pluorb / 60)
					+ "°" + Math.abs(L7_pluorb % 60) + "'");
		}
		if (Math.abs(L7_sunorb) <= 120 && sunny_houseno == L7_houseno && L7 != 1) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " is combusted by sun within orb of "
					+ (L7_sunorb / 60) + "°" + Math.abs(L7_sunorb % 60) + "'");
		}
		if (Math.abs(L7_rahuorb) <= 120 && rahu_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct rahu within orb of " + (L7_rahuorb / 60)
					+ "°" + Math.abs(L7_rahuorb % 60) + "'");
		}
		if (Math.abs(L7_uraorb) <= 120 && uranus_houseno == L7_houseno) {
			System.out.println("L7 " + planets_id.inverse().get(L7) + " conjuct uranus within orb of "
					+ (L7_uraorb / 60) + "°" + Math.abs(L7_uraorb % 60) + "'");
		}

		if (Math.abs(L10_ketorb) <= 120 && ketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct ketu within orb of "
					+ (L10_ketorb / 60) + "°" + Math.abs(L10_ketorb % 60) + "'");
		}
		if (Math.abs(L10_ukorb) <= 120 && upaketu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct upaketu within orb of "
					+ (L10_ukorb / 60) + "°" + Math.abs(L10_ukorb % 60) + "'");
		}
		if (Math.abs(L10_neporb) <= 120 && neptune_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct neptune within orb of "
					+ (L10_neporb / 60) + "°" + Math.abs(L10_neporb % 60) + "'");
		}
		if (Math.abs(L10_pluorb) <= 120 && pluto_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct pluto within orb of "
					+ (L10_pluorb / 60) + "°" + Math.abs(L10_pluorb % 60) + "'");
		}
		if (Math.abs(L10_sunorb) <= 120 && sunny_houseno == L10_houseno && L10 != 1) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " is combusted by sun within orb of "
					+ (L10_sunorb / 60) + "°" + Math.abs(L10_sunorb % 60) + "'");
		}
		if (Math.abs(L10_rahuorb) <= 120 && rahu_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct rahu within orb of "
					+ (L10_rahuorb / 60) + "°" + Math.abs(L10_rahuorb % 60) + "'");
		}
		if (Math.abs(L10_uraorb) <= 120 && uranus_houseno == L10_houseno) {
			System.out.println("L10 " + planets_id.inverse().get(L10) + " conjuct uranus within orb of "
					+ (L10_uraorb / 60) + "°" + Math.abs(L10_uraorb % 60) + "'");
		}

		if (Math.abs(L4_ketorb) <= 120 && ketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct ketu within orb of " + (L4_ketorb / 60)
					+ "°" + Math.abs(L4_ketorb % 60) + "'");
		}
		if (Math.abs(L4_ukorb) <= 120 && upaketu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct upaketu within orb of "
					+ (L4_ukorb / 60) + "°" + Math.abs(L4_ukorb % 60) + "'");
		}
		if (Math.abs(L4_neporb) <= 120 && neptune_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct neptune within orb of "
					+ (L4_neporb / 60) + "°" + Math.abs(L4_neporb % 60) + "'");
		}
		if (Math.abs(L4_pluorb) <= 120 && pluto_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct pluto within orb of " + (L4_pluorb / 60)
					+ "°" + Math.abs(L4_pluorb % 60) + "'");
		}
		if (Math.abs(L4_sunorb) <= 120 && sunny_houseno == L4_houseno && L4 != 1) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " is combusted by sun within orb of "
					+ (L4_sunorb / 60) + "°" + Math.abs(L4_sunorb % 60) + "'");
		}
		if (Math.abs(L4_rahuorb) <= 120 && rahu_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct rahu within orb of " + (L4_rahuorb / 60)
					+ "°" + Math.abs(L4_rahuorb % 60) + "'");
		}
		if (Math.abs(L4_uraorb) <= 120 && uranus_houseno == L4_houseno) {
			System.out.println("L4 " + planets_id.inverse().get(L4) + " conjuct uranus within orb of "
					+ (L4_uraorb / 60) + "°" + Math.abs(L4_uraorb % 60) + "'");
		}

		if (Math.abs(POF_ketorb) <= 120 && ketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct ketu within orb of " + (POF_ketorb / 60) + "°" + Math.abs(POF_ketorb % 60) + "'");
		}
		if (Math.abs(POF_ukorb) <= 120 && upaketu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct upaketu within orb of " + (POF_ukorb / 60) + "°" + Math.abs(POF_ukorb % 60) + "'");
		}
		if (Math.abs(POF_neporb) <= 120 && neptune_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct neptune within orb of " + (POF_neporb / 60) + "°" + Math.abs(POF_neporb % 60) + "'");
		}
		if (Math.abs(POF_pluorb) <= 120 && pluto_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct pluto within orb of " + (POF_pluorb / 60) + "°" + Math.abs(POF_pluorb % 60) + "'");
		}
		if (Math.abs(POF_sunorb) <= 120 && sunny_houseno == POF_houseno) {
			System.out.println("POF is combusted by sun within orb of " + (POF_sunorb / 60) + "°"
					+ Math.abs(POF_sunorb % 60) + "'");
		}
		if (Math.abs(POF_rahuorb) <= 120 && rahu_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct rahu within orb of " + (POF_rahuorb / 60) + "°" + Math.abs(POF_rahuorb % 60) + "'");
		}
		if (Math.abs(POF_uraorb) <= 120 && uranus_houseno == POF_houseno) {
			System.out.println(
					"POF conjuct uranus within orb of " + (POF_uraorb / 60) + "°" + Math.abs(POF_uraorb % 60) + "'");
		}
		bar.setValue(90);
		Thread.sleep(1000);
		
//--------------------------------------------------------------------------------------------------------------------
				
				System.out.println(
						"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				System.out.println("(Module 9)					Planetary War : ");
				System.out.println(
						"------------------------------------------------------------------------------------------------------------------------------------------"
								+ "");
				
				int pw1 = L1_minutes - L7_minutes;
				int pw2 = L10_minutes - L4_minutes;
				
				System.out.println("Tip :- The planet with lower magnitude (more brighter) and higher declination (more higher) wins the war");
				
				if(Math.abs(pw1) <= 60 && L1_houseno == L7_houseno) {
					System.out.println("\nThere is planetary war between L1 "+planets_id.inverse().get(L1)+" and L7 "+planets_id.inverse().get(L7));
				}
				
				if(Math.abs(pw2) <= 60 && L4_houseno == L10_houseno) {
					System.out.println("\nThere is planetary war between L4 "+planets_id.inverse().get(L4)+" and L10 "+planets_id.inverse().get(L10));
				}
				
//--------------------------------------------------------------------------------------------------------------------

		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		System.out.println("(Module 10)					Star Lord Reversal (SLR) : ");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");

		int L1_starlord = Iterables.get(planets.get(L1), 4);
		int L1_starlord_position = Iterables.get(planets.get(L1_starlord), 3);

		int L7_starlord = Iterables.get(planets.get(L7), 4);
		int L7_starlord_position = Iterables.get(planets.get(L7_starlord), 3);

		boolean flag = true;

		if (L1_starlord == L1) {
			System.out.println("\nASC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord == L7) {
			System.out.println("\nDSC Lord is in self star, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord_position == 1) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in ASC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L7_starlord_position == 7) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in DSC itself, Hence Star Lord Reversal is not applicable in this chart");
		}
		if (L1_starlord == L7) {
			System.out
					.println("\nASC Lord is in star of DSC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord == L1) {
			System.out
					.println("\nDSC Lord is in star of ASC Lord, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L1_starlord_position == 7) {
			System.out.println("\nASC Lord's Star Lord " + planets_id.inverse().get(L1_starlord)
					+ " is sitting in DSC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if (L7_starlord_position == 1) {
			System.out.println("\nDSC Lord's Star Lord " + planets_id.inverse().get(L7_starlord)
					+ " is sitting in ASC, Hence Star Lord Reversal is applicable in this chart");
			flag = false;
		}
		if(L1 == 1 && L1_starlord == 8) {
			System.out.println("L1 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if(L7 == 1 && L7_starlord == 8) {
			System.out.println("L7 Sun in nakshatra of Rahu who owns Aquarius results into Star Lord Reversal");
			flag = false;
		}
		if (flag) {
			System.out.println("\n[FINAL] : Star Lord Reversal is not applicable in this chart");
		}
		if (L1_houseno == 1 && L7_houseno == 7) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1) + " and DSC Lord "
					+ planets_id.inverse().get(L7) + " are in Ascendant and Descendant respectively");
		}
		if (L1_houseno == 7 && L7_houseno == 1) {
			System.out.println("\n[EXPERIMENTAL] : ASC Lord " + planets_id.inverse().get(L1)
					+ " is in DSC and DSC Lord " + planets_id.inverse().get(L7) + " is in ASC");
		}
		
		System.out.println(
				"\n\n\n\n------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("												THE END");
		System.out.println(
				"------------------------------------------------------------------------------------------------------------------------------------------"
						+ "");
		
		System.out.println("All Planets Signification Value");
		System.out.println("================================");
		System.out.println("Sun =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Sun"));
		System.out.println("Moon =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Moon"));
		System.out.println("Mars =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mars"));
		System.out.println("Mercury =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Mercury"));
		System.out.println("Venus =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Venus"));
		System.out.println("Jupiter =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Jupiter"));
		System.out.println("Saturn =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Saturn"));
		System.out.println("Rahu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Rahu"));
		System.out.println("Ketu =>  " + Muhurata.Calculate_Muhurata_ASC(house_view, "Ketu"));
		
		// Logic to form D1 Whole Sign (Western)
		HashBiMap<Integer, Integer> whole_sign_western = HashBiMap.create();
		int counterw = 0;
		for (int i = 1; i <= 12; i++) {
			int sign = Iterables.get(cusps_western.get(1), 0) + counterw;
			if (sign >= 13) {
				sign = sign % 12;
			}
			whole_sign_western.put(i, sign);
			D1_Lords_Western.put(lords.get(sign), i);
			counterw++;
		}
		
		// Logic to get house no. of western planets @ index 3
		for(int i=1; i<=14; i++) {
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 1)));
		}
		
		// Logic to get antiscia of planets
		for(int i=1; i<=14; i++) {
			int planet_sign = Iterables.get(planets_western.get(i), 1);
			int antiscia_sign = antiscia.get(planet_sign);
			int planet_minutes = Iterables.get(planets_western.get(i), 2);
			int antiscia_minutes = 1800 - planet_minutes;
			planets_western.put(i, antiscia_sign);
			planets_western.put(i, antiscia_minutes);
			planets_western.put(i, whole_sign_western.inverse().get(Iterables.get(planets_western.get(i), 4)));
		}
		
		bar.setValue(95);
		System.out.println("------------------------------------------------------------------------------------------------------------------------------------------");
		
//		System.out.println("Planets -----> Antiscion Points");
//		System.out.println("================================");
//		for(int i=1; i<=14; i++) {
//			System.out.println("Lord of " + D1_Lords_Western.get(planets_id.inverse().get(i)) + " house "
//					+ planets_id.inverse().get(i) + retro.get(Iterables.get(planets_western.get(i), 0)) + " " + Iterables.get(planets_western.get(i), 2)/60 + "°"+Iterables.get(planets_western.get(i), 2)%60 + "'" + " ("
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 1)) + ") Antiscion Point is " + 
//					Iterables.get(planets_western.get(i), 5)/60 + "°"+Iterables.get(planets_western.get(i), 5)%60 + "' "
//					+ signs_id.inverse().get(Iterables.get(planets_western.get(i), 4)));
//		}
		
		System.out.println("SPORTS ASTROLOGY - WESTERN TESTIMONIES");
		System.out.println("=======================================");
		
		// APOF on either side of 1st or 7th
		int apof_sign = Iterables.get(planets_western.get(14), 4);
		int apof_minutes = Iterables.get(planets_western.get(14), 5);
		int first_cusp_sign = Iterables.get(cusps_western.get(1), 0);
		int first_cusp_minutes = Iterables.get(cusps_western.get(1), 1);
		int seventh_cusp_sign = Iterables.get(cusps_western.get(7), 0);
		int seventh_cusp_minutes = Iterables.get(cusps_western.get(7), 1);
		int apof_first_orb = Math.abs(first_cusp_minutes - apof_minutes);
		int apof_seventh_orb = Math.abs(seventh_cusp_minutes - apof_minutes);
		if(apof_sign == first_cusp_sign && apof_first_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 1st cusp within "+apof_first_orb/60+"°"+apof_first_orb%60+"'");
		}
		if(apof_sign == seventh_cusp_sign && apof_seventh_orb <= 300) {
			System.out.println("\n-> AF (antiscion of Fortuna) on 7th cusp within "+apof_seventh_orb/60+"°"+apof_seventh_orb%60+"'");
		}
		
		GamblerDharma.setMultiMaps(planets_western, cusps_western, planets_id, retro, aspects, D1_Lords_Western, signs_id, planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1))));
		
//		calculateAspects(int nor_apof1, int planet1, boolean apply, int aspect, int nor_apof2, int planet2, int orb)
		
//		UR(10) or RA(8) conjunct Fortuna(14) or AF within 1.2 degrees= +10 pts. Opposition= -10 pts
		GamblerDharma.calculateAspects(1, 10, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 10, false, 6, 4, 14, 80);
		
		GamblerDharma.calculateAspects(1, 8, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 8, false, 6, 4, 14, 80);
		
//		PLUTO(12) conjunct or opposite Fortuna(14), AF, or Dispositor of Fortuna(14)= bad for favorites -10 pts. 1.2 degrees orb
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 0, 4, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, 14, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 4, 14, 80);
		// Calculate dispositor of a planet
		int dispPOF = planets_id.get(lords.get(Iterables.get(planets_western.get(14), 1)));
		GamblerDharma.calculateAspects(1, 12, false, 0, 1, dispPOF, 80);
		GamblerDharma.calculateAspects(1, 12, false, 6, 1, dispPOF, 80);
		
//		Combustion_Sun(1) of Fortuna(14) or AF is bad = -10 pts. Orb is 2 degrees either side of SU
		GamblerDharma.calculateAspects(1, 1, false, 0, 1, 14, 120);
		GamblerDharma.calculateAspects(1, 1, false, 0, 4, 14, 120);
		
//		MO(2) applying to conjunct Fortuna(14) or AF = + 9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 0, 4, 14, 300);
		
//		MO(2) applying to oppose Fortuna(14) or AF= -9 pts (5 degree orb)
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 4, 14, 300);
		
//		MO(2) trine(4)/square(3) to Fortuna(14) or AF = +/- 6 pts (applying aspect only, 5 deg orb)
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 4, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, 14, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 4, 14, 300);
		
//		Dispositor of Fortuna applying to conjunct or oppose Fortuna or AF = +/- 9 pts. 5 deg orb. Do not use if L1 or L7 is dispositor
		int L1_western = planets_id.get(lords.get(whole_sign_western.get(1)));
		int L7_western = planets_id.get(lords.get(whole_sign_western.get(7)));
		int L10_western = planets_id.get(lords.get(whole_sign_western.get(10)));
		int L4_western = planets_id.get(lords.get(whole_sign_western.get(4)));
		if (dispPOF != L1_western && dispPOF != L7_western) {
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, dispPOF, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 applying to conjunct or oppose Fortuna or AF= +/- 9 pts. 5 deg orb. L1 or L7 should not be Rx
		int L1_retro = Iterables.get(planets_western.get(L1_western), 0);
		int L7_retro = Iterables.get(planets_western.get(L7_western), 0);
		int L10_retro = Iterables.get(planets_western.get(L10_western), 0);
		int L4_retro = Iterables.get(planets_western.get(L4_western), 0);
		if (L1_retro != 1) {
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L1_western, true, 6, 4, 14, 300);
		}
		if (L7_retro != 1) {
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L7_western, true, 6, 4, 14, 300);
		}
//		L4 or L10 applying to conjunct or oppose Fortuna or AF = +/-7 pts
		if (L10_retro != 1) {
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L10_western, true, 6, 4, 14, 300);
		}
		if (L4_retro != 1) {
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 0, 4, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 1, 14, 300);
			GamblerDharma.calculateAspects(1, L4_western, true, 6, 4, 14, 300);
		}
		
//		L1 or L7 or AL1 or AL7 conjunct RA(8) or UR(10) within 1 degree is positive= +10 pts, within 2 deg = +5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 10, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 10, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 8, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 10, 120);
		
//		L1 or L7 or AL1 or AL7 conjunct KE(9) or NE(11) within 1 degree is negative= -10 pts, within 2 deg = -5 pts
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L1_western, false, 0, 1, 11, 120);
		
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 11, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 9, 120);
		GamblerDharma.calculateAspects(4, L7_western, false, 0, 1, 11, 120);
		
//		L1, L7, L10, L4 when combust (within 2 deg of SU(1) are harmed -5.5 pts)
		if (L1_western != 1 && L7_western != 1 && L10_western != 1 && L4_western != 1) {
			GamblerDharma.calculateAspects(1, L1_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L7_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L10_western, false, 0, 1, 1, 120);
			GamblerDharma.calculateAspects(1, L4_western, false, 0, 1, 1, 120);
		}
		
//		MO(2) applying to aspect L1= +9. L7 = -9. Use 5 deg. ORB i.e. Conjuct(0) Sextile (2), Square (3), Trine (4), Opposition (6)
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L1_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L1_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L7_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L7_western, 300);
		
//		MO applying to aspect L10= +6.5, L4= -6.5
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L10_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L10_western, 300);
		
		GamblerDharma.calculateAspects(1, 2, true, 0, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 2, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 3, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 4, 1, L4_western, 300);
		GamblerDharma.calculateAspects(1, 2, true, 6, 1, L4_western, 300);
		
		System.out.println("\n------------------------------------------------------------------------------------------------------------------------------------------");
		
		bar.setValue(100);
		Thread.sleep(1000);
		
//------------------------------------------------------------------------------------------------------------------
//					bar.setString("Generating PDF....");
					// Code to generate PDF
//					Document document = new Document(PageSize.A4);
//					File f = new File("C://Users//yadav//Desktop//Gambler's Dharma//PDF//" + name + ".pdf");
//					try
//		            {
//						PdfWriter writer = PdfWriter.getInstance(document, new FileOutputStream(f));
//						document.open();
//						document.add(new Paragraph("Gambler's Dharma - Sport's Prediction Using Vedic Astrology Automated Report"));
//		               //Text file Data
//		               try (BufferedReader br = new BufferedReader(new FileReader("C://Users//yadav//Desktop//Gambler's Dharma//" + name + ".txt"))) {
//		                      
//		                      String sCurrentLine;
//
//		                      while ((sCurrentLine = br.readLine()) != null) {
//		                          document.add(new Paragraph(sCurrentLine));
//		                      }
//
//		                      } catch (IOException exception) {
//		                      exception.printStackTrace();
//		                  }
//		               
//		               document.close();
//		               writer.close();
//		               
//		            } catch (DocumentException exception)
//		            {
//		               exception.printStackTrace();
//		            } catch (FileNotFoundException exception)
//		            {
//		               exception.printStackTrace();
//		            } 

//--------------------------------------------------------------------------------------------------------------------

		driver.quit();

		System.setOut(console);
		
		System.out.println(
				"\n\n\n\n\n\n\n\nYour Sport's Prediction Using Vedic & Western Astrology - Gambler's Dharma + Frawley's Testimonies Report has been generated successfully. Thank You for your patience");
		
		String regex = "^[\\w!#$%&'*+/=?`{|}~^-]+(?:\\.[\\w!#$%&'*+/=?`{|}~^-]+)*@(?:[a-zA-Z0-9-]+\\.)+[a-zA-Z]{2,6}$";
		Pattern pattern = Pattern.compile(regex);
		Matcher matcher = pattern.matcher(frame1.email.getText());
		
		if(matcher.matches()) {
			String email_id = frame1.email.getText();
			bar.setString("Sending Email");
			
//--------------------------------------------------------------------------------------------------------------------

			System.out.println("\n\nSending ASTRO-SPORTS-REPORT via Email to " + email_id + ".........\n");

			try {
				String subject = name + "  (" + date + "-" + month + "-" + year + ")";
				String message = "Please find attached ASTRO-SPORTS-REPORT based on Gambler's Dharma and Frawley's for  :  \n\n" + "Name  :  " + name
						+ "\n\n" + "Date  :  " + date + "-" + month + "-" + year + "\n\n" + "Time  :  " + hour + ":"
						+ minute + ":" + second + "\n\n" + "Stadium  :  " + sname
						+ "\n\n" + "Timezone : " + timezone + "\n\n\n\nTHANK YOU !!   BEST OF LUCK";
				String filePath = "C:\\Users\\yadav\\Desktop\\Gambler's Dharma\\" + name + " " + sdate + ".txt";
				String fileName = name + "-" + date + "-" + month + "-" + year + ".txt";
				GMailerA.send(subject, message, filePath, fileName);
				bar.setString("Email Sent");
			} catch (Exception e) {
				System.out
						.println("\nHuh huh  <(-_-)>  Something got really messed up in GMailer....\n");
				System.out.println(e);
				bar.setString("Failed to send email");
			}

			Thread.sleep(1000);
			bar.setString("BYE! :)");
			frame.setVisible(false);
			frame.dispose();

		} else if(frame1.email.getText().equals("OPTIONAL")) {
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		} else {
			System.out.println("\n\n************ INVALID EMAIL ADDRESS ENTERED. PLEASE ENTER VALID EMAIL ADDRESS ************\n\n");
			bar.setString("BYE! :)");
			Thread.sleep(1000);
			frame.setVisible(false);
			frame.dispose();
		}

		System.out.println("\n\n\nThis program is going to exit now..........");
		Thread.sleep(1000);
		System.out.println("\nTHANK YOU !!  BEST OF LUCK");

//	} else {
//		System.out.println("License Check : License Expired or Invalid License Key");
//		System.out.println("\nPlease contact license support to renew your license. This program is going to exit now.");
//		Thread.sleep(25000);
//	}
//--------------------------------------------------------------------------------------------------------------------
		
//		planets_western -> retro @ 0, sign @ 1, minutes @ 2, house no @ 3
//		antiscia sign @ 4, antiscia minutes @ 5, antiscia house no @ 6
//		cusps_western -> sign @ 0, minutes @ 1
		
	} // end of main()
} // end of class
----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1276)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2020)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1372)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2944)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2203)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2968)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
