!SESSION 2021-09-19 10:13:25.923 -----------------------------------------------
eclipse.buildId=4.19.0.I20210303-1800
java.version=16.0.1
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_IN
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file C:\Users\yadav\eclipse-workspace\.metadata\.bak_0.log
Created Time: 2021-09-19 18:55:35.985

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:35.986
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:35.987
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:38.134
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:38.135
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:38.136
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:38.163
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:38.163
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:38.164
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:38.183
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:38.183
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:38.183
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:40.515
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:40.516
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:40.516
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:40.530
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:40.531
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:40.531
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:40.547
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:40.548
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:40.548
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:40.566
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:40.566
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:40.567
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:40.580
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:40.581
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:40.581
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getConstantValue(JavadocHover.java:983)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:810)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:43.413
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:43.414
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:43.414
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:43.448
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:43.449
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:43.449
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:43.463
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:43.463
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:43.464
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:43.488
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Jupiter.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:43.488
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:43.489
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:46.868
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || M.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:55:46.868
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-19 18:55:46.869
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:46.885
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || M.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:46.886
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:46.886
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:49.389
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:55:49.390
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-19 18:55:49.391
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:49.407
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:49.407
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:49.408
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:53.924
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:53.925
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:53.926
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.lsp4e.jdt.LSJavaHoverProvider.lambda$0(LSJavaHoverProvider.java:68)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.run(CompletableFuture.java:1800)
	at java.base/java.util.concurrent.CompletableFuture$AsyncRun.exec(CompletableFuture.java:1792)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:295)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1016)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1665)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1598)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:53.939
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:53.940
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:53.941
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:53.959
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:53.960
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:53.960
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoveredASTNode(JavadocHover.java:1003)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getInfoText(JavadocHover.java:799)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo(JavadocHover.java:743)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.internalGetHoverInfo(JavadocHover.java:666)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavadocHover.getHoverInfo2(JavadocHover.java:658)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:54.643
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Mercury.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:54.644
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:54.644
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:57.414
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || S.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:55:57.415
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-19 18:55:57.415
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:55:57.431
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || S.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:55:57.431
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:55:57.432
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:01.435
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:56:01.436
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-19 18:56:01.436
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:01.452
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:56:01.453
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:56:01.453
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:03.222
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:56:03.222
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:56:03.223
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.internalGetHoverInfo(NLSStringHover.java:139)
	at org.eclipse.jdt.internal.ui.text.java.hover.NLSStringHover.getHoverInfo2(NLSStringHover.java:118)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:163)
	at org.eclipse.jdt.internal.ui.text.java.hover.BestMatchHover.getHoverInfo2(BestMatchHover.java:130)
	at org.eclipse.jdt.internal.ui.text.java.hover.JavaEditorTextHoverProxy.getHoverInfo2(JavaEditorTextHoverProxy.java:89)
	at org.eclipse.jface.text.TextViewerHoverManager$1.run(TextViewerHoverManager.java:155)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:03.870
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2") )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:56:03.871
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:56:03.871
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:06.460
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2")  )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:56:06.461
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 0 2021-09-19 18:56:06.461
!MESSAGE Error in JDT Core during reconcile
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:06.477
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2")  )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 2 2021-09-19 18:56:06.478
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.core.manipulation".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core.manipulation 4 0 2021-09-19 18:56:06.478
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:323)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1231)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:820)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider$1.run(CoreASTProvider.java:272)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.createAST(CoreASTProvider.java:264)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:197)
	at org.eclipse.jdt.core.manipulation.CoreASTProvider.getAST(CoreASTProvider.java:187)
	at org.eclipse.jdt.core.manipulation.SharedASTProviderCore.getAST(SharedASTProviderCore.java:138)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:166)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$1.run(SelectionListenerWithASTManager.java:151)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)

!ENTRY org.eclipse.jdt.core 4 4 2021-09-19 18:56:09.481
!MESSAGE Exception occurred during compilation unit conversion:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.n00bc0der.code.GamblerDharma;

import java.util.HashMap;
import java.util.concurrent.TimeUnit;

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
//import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.opera.OperaDriver;
import org.openqa.selenium.opera.OperaOptions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.HashBiMap;
import com.google.common.collect.Iterables;
import com.google.common.collect.Multimap;

public class GamblerDharma {

	public static void main(String[] args) throws InterruptedException {
		
//-------------------------------------------------------------------------------------------------------------------
//									Enter Sports Contest Details Here
//-------------------------------------------------------------------------------------------------------------------
		String name = "Chennai Super Kings vs Mumbai Indians";
		String date = "19";
		String month = "9";
		String year = "2021";
		String hour = "18"; // 24_hour_format
		String minute = "30";
		String country = "United Arab Emirates";
		String city = "Abu Dhabi";
//-------------------------------------------------------------------------------------------------------------------
		
//		int int_hour = Integer.parseInt(hour);
//		String hour2 = hour;
//		String meridian = "AM";
//		if(int_hour > 12) { hour2 = Integer.toString(int_hour % 12); meridian = "PM"; }
		
		HashBiMap<String, Integer> signs = HashBiMap.create();
		//signs.put("Ascendant", 0);
		signs.put("Aries", 1);
		signs.put("Taurus", 2);
		signs.put("Gemini", 3);
		signs.put("Cancer", 4);
		signs.put("Leo", 5);
		signs.put("Virgo", 6);
		signs.put("Libra", 7);
		signs.put("Scorpio", 8);
		signs.put("Saggitarius", 9);
		signs.put("Capricorn", 10);
		signs.put("Aquarius", 11);
		signs.put("Pisces", 12);
		
		HashBiMap<String, Integer> planets_id = HashBiMap.create();
		//HashMap<String, Integer> planets_id = new HashMap<String, Integer>();
		planets_id.put("Ascendant", 0);
		planets_id.put("Sun", 1);
		planets_id.put("Moon", 2);
		planets_id.put("Mars", 3);
		planets_id.put("Mercury", 4);
		planets_id.put("Jupiter", 5);
		planets_id.put("Venus", 6);
		planets_id.put("Saturn", 7);
		planets_id.put("Rahu", 8);
		planets_id.put("Ketu", 9);
		
		HashMap<String, String> houses = new HashMap<String, String>();
		houses.put("Lagna Bhava", "1");
		houses.put("Dhana Bhava", "2");
		houses.put("Bratru Bhava", "3");
		houses.put("Matru Bhava", "4");
		houses.put("Putra Bhava", "5");
		houses.put("Shatru Bhava", "6");
		houses.put("Kalatra Bhava", "7");
		houses.put("Ayu Bhava", "8");
		houses.put("Bhagya Bhava", "9");
		houses.put("Rajya Bhava", "10");
		houses.put("Labha Bhava", "11");
		houses.put("Vyaya Bhava", "12");
		
		HashMap<Integer, String> lords = new HashMap<Integer, String>();
		lords.put(1, "Mars");
		lords.put(2, "Venus");
		lords.put(3, "Mercury");
		lords.put(4, "Moon");
		lords.put(5, "Sun");
		lords.put(6, "Mercury");
		lords.put(7, "Venus");
		lords.put(8, "Mars");
		lords.put(9, "Jupiter");
		lords.put(10, "Saturn");
		lords.put(11, "Saturn");
		lords.put(12, "Jupiter");
		
		System.setProperty("webdriver.opera.driver", "D:\\drivers\\operadriver.exe");
		OperaOptions options = new OperaOptions();
		options.addArguments("user-data-dir=C:\\Users\\yadav\\AppData\\Roaming\\Opera Software\\Opera Stable");
		WebDriver driver = new OperaDriver(options);
		JavascriptExecutor js = (JavascriptExecutor) driver;
		
		@SuppressWarnings("deprecation")
		Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
				.withTimeout(10, TimeUnit.SECONDS)
				.pollingEvery(5, TimeUnit.SECONDS)
				.ignoring(Exception.class);
		
		driver.navigate().to("https://www.onlinejyotish.com/free-astrology/kp/index.php");
		driver.manage().window().maximize();
		
		wait.until(ExpectedConditions.elementToBeClickable(By.id("name"))).sendKeys(name);
		Select i_date = new Select(driver.findElement(By.id("day")));
		i_date.selectByValue(date);
		Select i_month = new Select(driver.findElement(By.id("month")));
		i_month.selectByValue(month);
		driver.findElement(By.id("year")).sendKeys(Keys.chord(Keys.CONTROL, "a"), year);
		Select i_hour = new Select(driver.findElement(By.id("hour")));
		i_hour.selectByValue(hour);
		Select i_minute = new Select(driver.findElement(By.id("minute")));
		i_minute.selectByValue(minute);
		Select i_country = new Select(driver.findElement(By.id("country")));
		i_country.selectByVisibleText(country);
		driver.findElement(By.id("city")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		wait.until(ExpectedConditions.presenceOfElementLocated(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[10]/td/div/a[1]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/form/div/div/table/tbody/tr[15]/td/input[3]"))).click();
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[1]/h4/a"))).click();
		
		Multimap<String, String> cusps = ArrayListMultimap.create();
		for(int i=3; i<=14; i++) {
			for(int j=2; j<=3; j++) {
				String key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[4]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				cusps.put(houses.get(key), values);
			}
		}
		
		Multimap<String, Integer> D1_Lords = ArrayListMultimap.create();
		
		String lagna_sign = (Iterables.get(cusps.get("1"), 0));
		HashBiMap<Integer, Integer> whole_sign = HashBiMap.create();
		int counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(lagna_sign) + counter;
		if(sign >= 13) { sign = sign % 12; }
		whole_sign.put(sign, i);
		D1_Lords.put(lords.get(sign), i);
		counter++;
		}
		
		Multimap<Integer, String> planets = ArrayListMultimap.create();
		for(int i=3; i<=11; i++) { String key = null;
			for(int j=2; j<=4; j++) {
				key = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td[1]"))).getText();
				String values = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[6]/div[2]/div/table[1]/tbody/tr["+i+"]/td["+j+"]"))).getText();
				planets.put(planets_id.get(key), values);
				}
			String p_sign = Iterables.get(planets.get(planets_id.get(key)), 1);
			int p_sign_no = signs.get(p_sign);
			planets.put(planets_id.get(key), (whole_sign.get(p_sign_no)).toString());
		}
		
		wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[1]/h4/a"))).click();
		String latitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[7]/td[2]"))).getText();
		String longitude = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[8]/td[2]"))).getText();
		String timezone = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[3]/div/div/div/div[1]/div[2]/div[1]/div[2]/div/table/tbody/tr[9]/td[2]"))).getText();
		
//----------------------------------------------------------------------------------------------------------------------		
		//planets.get(1), 0 -> Sun retro/combust
		//planets.get(1), 1 -> Sun sign
		//planets.get(1), 2 -> Sun degree
		//planets.get(1), 3 -> Sun house_no
		//System.out.println(Iterables.get(planets.get(1), 1));
		
		// cusps.get(12), 0 -> 12th cusp sign
		// cusps.get(12), 1 -> 12th cusp degree
		//System.out.println(Iterables.get(cusps.get("12"), 1));
//----------------------------------------------------------------------------------------------------------------------
		
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 1)					D1 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		for(int i=1; i<=9; i++) {
			
			String planet_house_no = Iterables.get(planets.get(i), 3);
			String planet_sign = Iterables.get(planets.get(i), 1);
			String cusp_sign = Iterables.get(cusps.get(planet_house_no), 0);
			
			String planet_DM = Iterables.get(planets.get(i), 2);
			int planet_D = Integer.parseInt(planet_DM.substring(0,2));
			int planet_M = Integer.parseInt(planet_DM.substring(3,5));
			int planet_minutes = planet_D * 60 + planet_M;
			
			String cusp_DM = Iterables.get(cusps.get(planet_house_no), 1);
			int cusp_D = Integer.parseInt(cusp_DM.substring(0,2));
			int cusp_M = Integer.parseInt(cusp_DM.substring(3,5));
			int cusp_minutes = cusp_D * 60 + cusp_M;
			
			int orb = cusp_minutes - planet_minutes;
			
			String planet_rc = Iterables.get(planets.get(i), 0);
			
			if(cusp_sign.equals(planet_sign)) {
				if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D1_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" ("+planet_sign+") is on "+planet_house_no+" cusp but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
			}
		}
		
//---------------------------------------------------------------------------------------------------------------------
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 2)					D9 Cuspal Strength : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.cosmicsquares.com/free-horoscope/navamsa-chart");
		
		//js.executeScript("window.scrollBy(0,1500)");
		
		Select n_year = new Select(driver.findElement(By.id("birthyear")));
		n_year.selectByValue(year);
		
		Select n_month = new Select(driver.findElement(By.id("birthmonth")));
		if(Integer.parseInt(month) < 10) {n_month.selectByValue("0"+month);} else {n_month.selectByValue(month);}
		
		Select n_date = new Select(driver.findElement(By.id("birthday")));
		if(Integer.parseInt(date) < 10) {n_date.selectByValue("0"+date);} else {n_date.selectByValue(date);}
		
		Select n_hour = new Select(driver.findElement(By.id("birthhour")));
		if(Integer.parseInt(hour) < 10) {n_hour.selectByValue("0"+hour);} else {n_hour.selectByValue(hour);}
		
		Select n_minute = new Select(driver.findElement(By.id("birthminute")));
		if(Integer.parseInt(minute) < 10) {n_minute.selectByValue("0"+minute);} else {n_minute.selectByValue(minute);}
		
		Select n_country = new Select(driver.findElement(By.id("birthcountry")));
		n_country.selectByVisibleText(country);
		
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.chord(Keys.CONTROL, "a"), city);
		Thread.sleep(5000);
		driver.findElement(By.id("birthlocation")).sendKeys(Keys.DOWN, Keys.RETURN);
		
		Thread.sleep(5000);
		
		driver.findElement(By.id("form-submit-birth")).click();
		
		Thread.sleep(5000);
		
		// 0 -> degree , 1 -> sign
		Multimap<Integer, String> navamsa = ArrayListMultimap.create();
		for(int i=1; i<=10; i++) {
			for(int j=3; j<=4; j++) {
				String key = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td[1]/div/p")).getText();
				String values = driver.findElement(By.xpath("/html/body/div[1]/div[2]/div[1]/div[3]/div[2]/section/div[1]/div/div[4]/div[2]/div[2]/table/tbody/tr["+i+"]/td["+j+"]/div/p")).getText();
				navamsa.put(planets_id.get(key.trim()), values);
			}
		}
		
		Multimap<String, Integer> D9_Lords = ArrayListMultimap.create();
		
		//System.out.println(navamsa);
		String navamsa_lagna_sign = Iterables.get(navamsa.get(0), 1);
		HashBiMap<Integer, Integer> navamsa_whole_sign = HashBiMap.create();
		int n_counter = 0;
		for(int i=1; i<=12; i++) {
		int sign = signs.get(navamsa_lagna_sign) + n_counter;
		if(sign >= 13) { sign = sign % 12; }
		navamsa_whole_sign.put(i, sign);
		D9_Lords.put(lords.get(sign), i);
		n_counter++;
		}
		//System.out.println(navamsa_whole_sign);
		int navamsa_dsc_sign = navamsa_whole_sign.get(7);
		int navamsa_mc_sign = navamsa_whole_sign.get(10);
		int navamsa_ic_sign = navamsa_whole_sign.get(4);
		
		int navamsa_asc_D = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(0,2));
		int navamsa_asc_M = Integer.parseInt(Iterables.get(navamsa.get(0), 0).substring(4,6));
		int navamsa_asc_minutes = navamsa_asc_D * 60 + navamsa_asc_M;
		//System.out.println(navamsa_asc_minutes);
		
		for(int i=1; i<=9; i++) {
			
		int nplanet_D = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(0,2));
		int nplanet_M = Integer.parseInt(Iterables.get(navamsa.get(i), 0).substring(4,6));
		int nplanet_minutes = nplanet_D * 60 + nplanet_M;
		//System.out.println(nplanet_minutes);
		int orb = navamsa_asc_minutes - nplanet_minutes;
		
		String planet_rc = Iterables.get(planets.get(i), 0);
		
		String navamsa_planet_sign = Iterables.get(navamsa.get(i), 1);
		int navamsa_planet_sign_no = signs.get(navamsa_planet_sign); 
		if(navamsa_lagna_sign.equals(navamsa_planet_sign)) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Ascendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_dsc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 Dscendant but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_mc_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+ " is in D9 10th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 10th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		if(navamsa_ic_sign == navamsa_planet_sign_no) {
			if(Math.abs(orb) <= 150) {
				System.out.println("******************** "+"Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"'"+" ********************");
			} else {
				System.out.println("Lord of "+D9_Lords.get(planets_id.inverse().get(i))+" house "+planets_id.inverse().get(i)+planet_rc+" is in D9 4th but within orb of "+(orb/60)+"°"+Math.abs(orb%60)+"' (out of 2°30' orb)");
			}
		}
		
		}
		
//-------------------------------------------------------------------------------------------------------------------
		
		System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		System.out.println("(Module 3)					The Sublord Technique : ");
		System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
		driver.navigate().to("https://www.rahasyavedicastrology.com/rva-software/");
		js.executeScript("window.scrollBy(0,500)");
		//Thread.sleep(500);
		
		driver.findElement(By.id("m-name")).sendKeys(Keys.chord(Keys.CONTROL, "a"), name);
		
		Select dates = new Select(driver.findElement(By.id("m-date")));
		dates.selectByValue(date);
		Select months = new Select(driver.findElement(By.id("m-month")));
		months.selectByValue(month);
		Select years = new Select(driver.findElement(By.id("m-year")));
		years.selectByValue(year);
		
		Select hours = new Select(driver.findElement(By.id("m-hour")));
		hours.selectByValue(hour);
		Select minutes = new Select(driver.findElement(By.id("m-minute")));
		minutes.selectByValue(minute);
		Select seconds = new Select(driver.findElement(By.id("m-seconds")));
		seconds.selectByValue("0");
		
		driver.findElement(By.id("m-advanced-geo-option")).click();
		Thread.sleep(10000);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lat"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), latitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-lon"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), longitude);
		wait.until(ExpectedConditions.elementToBeClickable(By.id("m-hr-tzone"))).sendKeys(Keys.chord(Keys.CONTROL, "a"), timezone);
		
		driver.findElement(By.id("m-submit-hr-form")).click();
		Thread.sleep(7000);
		
		String asc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[1]/td[6]"))).getText();
		String dsc_csl = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[1]/div/div[1]/div/table/tbody/tr[7]/td[6]"))).getText();
		int ASC_SUB = 0;
		int DSC_SUB = 0;
		
		Multimap<Integer, String> house_view = ArrayListMultimap.create();
		for(int i=1; i<=12; i++) {
			for(int j=1; j<=4; j++) {
			String s = wait.until(ExpectedConditions.elementToBeClickable(By.xpath("/html/body/div[2]/div[2]/div/main/article/div/div[4]/div[2]/div[2]/div/div[1]/div/table/tbody/tr["+i+"]/td["+j+"]"))).getText();
			if( (s.equals("Uranus")) || (s.equals("Neptune")) || (s.equals("Pluto")) ) {
			house_view.put(i, "");
			} else { house_view.put(i, s); }
		}
		}
		//System.out.println(house_view);
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB + 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")) && (Iterables.get(house_view.get(i), 2).equals("")) && (Iterables.get(house_view.get(i), 3).contains(asc_csl)))) {
				ASC_SUB = ASC_SUB - 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
					if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB + 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB + 2; }
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0).equals("")) && (Iterables.get(house_view.get(i), 1).equals("")))) {
				if(Iterables.get(house_view.get(i), 2).contains(asc_csl)) { ASC_SUB = ASC_SUB - 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(asc_csl)) { ASC_SUB = ASC_SUB - 2; }
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB + cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(asc_csl))) {
						ASC_SUB = ASC_SUB - cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
		
		System.out.println("1st CSL : "+asc_csl+" = "+ASC_SUB);
		
		for(int i=1; i<=12; i++) {
			
			if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB - 4; }
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == "") && (Iterables.get(house_view.get(i), 2) == "" && (Iterables.get(house_view.get(i), 3).contains(dsc_csl))))) {
				DSC_SUB = DSC_SUB + 4; }
			else if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
					if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 4; } 
					else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB - 2;}
			}
			else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && ((Iterables.get(house_view.get(i), 0) == "") && (Iterables.get(house_view.get(i), 1) == ""))) {
				if(Iterables.get(house_view.get(i), 2).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 4; } 
				else if(Iterables.get(house_view.get(i), 3).contains(dsc_csl)) { DSC_SUB = DSC_SUB + 2;}
		}
			else {
				int cnt = 4;
				for(int j=0; j<=3; j++) {
				String s = Iterables.get(house_view.get(i), j);
				
				if((i==1 || i==2 || i==3 || i==6 || i==10 || i==11) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB - cnt;
			} else if((i==4 || i==5 || i==7 || i==8 || i==9 || i==12) && (s.contains(dsc_csl))) {
						DSC_SUB = DSC_SUB + cnt;
			}
				cnt = cnt - 1;
			}
			}
			
		}
	System.out.println("7th CSL : "+dsc_csl+" = "+DSC_SUB);
	
//-------------------------------------------------------------------------------------------------------------------

	System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
	System.out.println("(Module 4)					Victory House Technique : ");
	System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
				
			float ASC_VHQ = 0;
			float DSC_VHQ = 0;
			
			String Mars = Iterables.get(planets.get(3), 3);
						if(Mars.equals("1") || Mars.equals("3") || Mars.equals("6") || Mars.equals("10") || Mars.equals("11")) {
							ASC_VHQ = (float) (ASC_VHQ + 3);
						} else if(Mars.equals("7") || Mars.equals("9") || Mars.equals("12") || Mars.equals("4") || Mars.equals("5")) {
							DSC_VHQ = (float) (DSC_VHQ + 3);
						}
						
			String Saturn = Iterables.get(planets.get(7), 3);
			if(Saturn.equals("1") || Saturn.equals("3") || Saturn.equals("6") || Saturn.equals("10") || Saturn.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Saturn.equals("7") || Saturn.equals("9") || Saturn.equals("12") || Saturn.equals("4") || Saturn.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Sun = Iterables.get(planets.get(1), 3);
			if(Sun.equals("1") || Sun.equals("3") || Sun.equals("6") || Sun.equals("10") || Sun.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2.5);
			} else if(Sun.equals("7") || Sun.equals("9") || Sun.equals("12") || Sun.equals("4") || Sun.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2.5);
			}
			
			String Rahu = Iterables.get(planets.get(8), 3);
			if(Rahu.equals("1") || Rahu.equals("3") || Rahu.equals("6") || Rahu.equals("10") || Rahu.equals("11")) {
				ASC_VHQ = (float) (ASC_VHQ + 2);
			} else if(Rahu.equals("7") || Rahu.equals("9") || Rahu.equals("12") || Rahu.equals("4") || Rahu.equals("5")) {
				DSC_VHQ = (float) (DSC_VHQ + 2);
			}
			
			System.out.println("ASCENDANT : " + ASC_VHQ);
			System.out.println("DSCENDANT : " + DSC_VHQ);
			
//-------------------------------------------------------------------------------------------------------------------
			
			System.out.println("\n\n\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			System.out.println("(Module 5)					SKY / PKY : ");
			System.out.println("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------");
			
			String Venus = Iterables.get(planets.get(6), 3);
			String Jupiter = Iterables.get(planets.get(5), 3);
			String Mercury = Iterables.get(planets.get(4), 3);
			String Ketu = Iterables.get(planets.get(9), 3);
			
			if( ( Venus.equals("2") || Jupiter.equals("2") || Mercury.equals("2") ) && ( Venus.equals("12") || Jupiter.equals("12") || Mercury.equals("12") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Ascendant");
			}
			
			if( ( Venus.equals("6") || Jupiter.equals("6") || Mercury.equals("6") ) && ( Venus.equals("8") || Jupiter.equals("8") || Mercury.equals("8") ) ) {
				System.out.println("Shubha Kartari Yoga forming on Dscendant");
			}
			
			( Saturn.equals("2") || Mars.equals("2") || Sun.equals("2") || )
			
			
	}}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)

!ENTRY org.eclipse.jdt.ui 4 2 2021-09-19 18:56:09.481
!MESSAGE Problems occurred when invoking code from plug-in: "org.eclipse.jdt.ui".
!STACK 0
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.InfixExpression.setOperator(InfixExpression.java:383)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2638)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2014)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToParenthesizedExpression(ASTConverter.java:3764)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1932)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1204)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1963)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3023)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:751)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:208)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:3316)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1513)
	at org.eclipse.jdt.core.dom.AST.convertCompilationUnit(AST.java:474)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:201)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:266)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:596)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1142)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:173)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:94)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:740)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:806)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1319)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:131)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:113)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:93)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:45)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:90)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:157)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:94)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:107)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:76)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:210)
